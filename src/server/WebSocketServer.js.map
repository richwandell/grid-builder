{"version":3,"sources":["WebSocketServer.es6"],"names":["WsServer","require","server","http","WebSocketServer","log","restServer","connections","httpServer","autoAcceptConnections","on","request","onRequest","connection","accept","origin","push","message","onConnectionMessage","reasonCode","description","Date","remoteAddress","type","console","utf8Data","sendUTF","binaryData","length","sendBytes"],"mappings":";;;;;;;;;;AAAA,IAAMA,WAAWC,QAAQ,WAAR,EAAqBC,MAAtC;AACA,IAAMC,OAAOF,QAAQ,MAAR,CAAb;;IAGMG,e;AAEF,6BAAYC,GAAZ,EAAsBC,UAAtB,EAA6C;AAAA;;AACzC,aAAKD,GAAL,GAAWA,GAAX;AACA,aAAKE,WAAL,GAAmB,EAAnB;AACA,aAAKD,UAAL,GAAkBA,UAAlB;AACH;;;;sCAEY;AAAA;;AACT,iBAAKJ,MAAL,GAAc,IAAIF,QAAJ,CAAa;AACvBQ,4BAAY,KAAKF,UADM;AAEvBG,uCAAuB;AAFA,aAAb,CAAd;;AAKA,iBAAKP,MAAL,CAAYQ,EAAZ,CAAe,SAAf,EAA0B,UAACC,OAAD,EAAa;AACnC,sBAAKC,SAAL,CAAeD,OAAf;AACH,aAFD;AAGH;;;kCAESA,O,EAAS;AAAA;;AACf,gBAAIE,aAAaF,QAAQG,MAAR,CAAe,eAAf,EAAgCH,QAAQI,MAAxC,CAAjB;AACA,iBAAKR,WAAL,CAAiBS,IAAjB,CAAsBH,UAAtB;AACA,iBAAKR,GAAL,CAASA,GAAT,CAAa,qBAAb;;AAEAQ,uBAAWH,EAAX,CAAc,SAAd,EAAyB,UAACO,OAAD,EAAa;AAClC,uBAAKC,mBAAL,CAAyBL,UAAzB,EAAqCI,OAArC;AACH,aAFD;;AAIAJ,uBAAWH,EAAX,CAAc,OAAd,EAAuB,UAACS,UAAD,EAAaC,WAAb,EAA6B;AAChD,uBAAKf,GAAL,CAASA,GAAT,CAAc,IAAIgB,IAAJ,EAAD,GAAe,QAAf,GAA0BR,WAAWS,aAArC,GAAqD,gBAAlE;AACH,aAFD;AAGH;;;4CAEmBT,U,EAAYI,O,EAAS;AACrC,gBAAIA,QAAQM,IAAR,KAAiB,MAArB,EAA6B;AACzBC,wBAAQnB,GAAR,CAAY,uBAAuBY,QAAQQ,QAA3C;AACAZ,2BAAWa,OAAX,CAAmBT,QAAQQ,QAA3B;AACH,aAHD,MAIK,IAAIR,QAAQM,IAAR,KAAiB,QAArB,EAA+B;AAChCC,wBAAQnB,GAAR,CAAY,gCAAgCY,QAAQU,UAAR,CAAmBC,MAAnD,GAA4D,QAAxE;AACAf,2BAAWgB,SAAX,CAAqBZ,QAAQU,UAA7B;AACH;AACJ;;;;;;kBAGUvB,e","file":"WebSocketServer.js","sourcesContent":["const WsServer = require('websocket').server;\nconst http = require('http');\n\n\nclass WebSocketServer {\n\n    constructor(log: Log, restServer: RestServer){\n        this.log = log;\n        this.connections = [];\n        this.restServer = restServer;\n    }\n\n    startServer(){\n        this.server = new WsServer({\n            httpServer: this.restServer,\n            autoAcceptConnections: false\n        });\n\n        this.server.on('request', (request) => {\n            this.onRequest(request);\n        });\n    }\n\n    onRequest(request) {\n        let connection = request.accept('echo-protocol', request.origin);\n        this.connections.push(connection);\n        this.log.log(\"Connection Accepted\");\n\n        connection.on('message', (message) => {\n            this.onConnectionMessage(connection, message);\n        });\n\n        connection.on('close', (reasonCode, description) => {\n            this.log.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');\n        });\n    }\n\n    onConnectionMessage(connection, message) {\n        if (message.type === 'utf8') {\n            console.log('Received Message: ' + message.utf8Data);\n            connection.sendUTF(message.utf8Data);\n        }\n        else if (message.type === 'binary') {\n            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');\n            connection.sendBytes(message.binaryData);\n        }\n    }\n}\n\nexport default WebSocketServer;"]}