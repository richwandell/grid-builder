{"version":3,"sources":["Log.es6"],"names":["fs","require","Log","options","filename","filesize","logfolder","numfiles","debug","attrname","hasOwnProperty","fullpath","existingFiles","dir","files","readdirSync","forEach","file","indexOf","push","appendFile","watcher","watch","eventType","rotate","close","numFiles","length","stat","err","stats","size","console","log","x","existingFile","newName","rename","writeFileSync","readFileSync","rand","Math","random","unlink","pop","message","st","JSON","stringify","e","module","exports"],"mappings":";;;;;;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;;IAEMC,G;AAEF,iBAAYC,OAAZ,EAAoB;AAAA;;AAAA;;AAChB,aAAKA,OAAL,GAAe;AACXC,sBAAU,SADC;AAEXC,sBAAU,OAFC;AAGXC,uBAAW,KAHA;AAIXC,sBAAU,CAJC;AAKXC,mBAAO;AALI,SAAf;AAOA,aAAK,IAAIC,QAAT,IAAqBN,OAArB,EAA8B;AAC1B,gBAAG,KAAKA,OAAL,CAAaO,cAAb,CAA4BD,QAA5B,CAAH,EAAyC;AACrC,qBAAKN,OAAL,CAAaM,QAAb,IAAyBN,QAAQM,QAAR,CAAzB;AACH;AACJ;AACD,aAAKE,QAAL,GAAgB,KAAKR,OAAL,CAAaG,SAAb,GAAyB,GAAzB,GAA+B,KAAKH,OAAL,CAAaC,QAA5D;AACA,aAAKQ,aAAL,GAAqB,EAArB;AACA,YAAMC,MAAM,KAAKV,OAAL,CAAaG,SAAzB;AACA,YAAMQ,QAAQd,GAAGe,WAAH,CAAeF,GAAf,CAAd;AACA,YAAMT,WAAW,KAAKD,OAAL,CAAaC,QAA9B;;AAEAU,cAAME,OAAN,CAAc,UAACC,IAAD,EAAU;AACpB,gBAAGA,KAAKC,OAAL,CAAad,QAAb,IAAyB,CAAC,CAA7B,EAA+B;AAC3B,sBAAKQ,aAAL,CAAmBO,IAAnB,CAAwBF,IAAxB;AACH;AACJ,SAJD;;AAMAjB,WAAGoB,UAAH,CAAc,KAAKT,QAAnB,EAA6B,2BAA7B,EAA0D,YAAK;AAC3D,kBAAKU,OAAL,GAAerB,GAAGsB,KAAH,CAAS,MAAKX,QAAd,EAAwB,UAACY,SAAD,EAAYnB,QAAZ,EAAwB;AAC3D,sBAAKoB,MAAL,CAAYD,SAAZ,EAAuBnB,QAAvB;AACH,aAFc,CAAf;AAGH,SAJD;AAKH;;;;gCAEM;AACH,iBAAKiB,OAAL,CAAaI,KAAb;AACH;;;+BAEMF,S,EAAWnB,Q,EAAU;AAAA;;AACxB,gBAAGmB,aAAa,QAAhB,EAAyB;AACrB,oBAAMlB,WAAW,KAAKF,OAAL,CAAaE,QAA9B;AACA,oBAAMqB,WAAW,KAAKd,aAAL,CAAmBe,MAAnB,GAA4B,CAA7C;AACA3B,mBAAG4B,IAAH,CAAQ,KAAKjB,QAAb,EAAuB,UAACkB,GAAD,EAAMC,KAAN,EAAgB;AACnC,wBAAGA,MAAMC,IAAN,IAAc1B,QAAjB,EAA0B;AACtB2B,gCAAQC,GAAR,CAAY,eAAZ;AACA,6BAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,OAAKtB,aAAL,CAAmBe,MAAtC,EAA8CO,GAA9C,EAAkD;AAC9C,gCAAIC,eAAe,OAAKvB,aAAL,CAAmBsB,CAAnB,CAAnB;AACA,gCAAGC,gBAAgB,OAAKhC,OAAL,CAAaC,QAAhC,EAAyC;AACrC,oCAAIgC,UAAU,OAAKzB,QAAL,GAAgB,GAAhB,IAAuBuB,IAAI,CAA3B,CAAd;AACAlC,mCAAGqC,MAAH,CAAU,OAAKlC,OAAL,CAAaG,SAAb,GAAyB,GAAzB,GAA+B6B,YAAzC,EAAuDC,OAAvD,EAAgE,YAAU,CAAE,CAA5E;AACH;AACJ;AACDpC,2BAAGsC,aAAH,CAAiB,OAAK3B,QAAL,GAAgB,IAAjC,EAAuCX,GAAGuC,YAAH,CAAgB,OAAK5B,QAArB,CAAvC;AACA,+BAAKC,aAAL,CAAmBO,IAAnB,CAAwB,OAAKR,QAAL,GAAgB,GAAhB,GAAsBe,QAA9C;AACA,4BAAIc,OAAOC,KAAKC,MAAL,EAAX;AACA1C,2BAAGsC,aAAH,CAAiB,OAAK3B,QAAtB,EAAgC,oBAAoB6B,IAApB,GAA2B,GAA3D;AACA,4BAAGd,YAAY,OAAKvB,OAAL,CAAaI,QAA5B,EAAqC;AACjCP,+BAAG2C,MAAH,CAAU,OAAKhC,QAAL,GAAgB,GAAhB,IAAuB,OAAKC,aAAL,CAAmBe,MAAnB,GAA4B,CAAnD,CAAV,EAAiE,YAAM;AACnE,uCAAKf,aAAL,CAAmBgC,GAAnB;AACH,6BAFD;AAGH;AACJ;AACJ,iBApBD;AAqBH;AACJ;;;4BAEGC,O,EAAQ;AACR,gBAAIC,WAAJ;AACA,gBAAG;AACCA,qBAAKC,KAAKC,SAAL,CAAeH,OAAf,CAAL;AACH,aAFD,CAEC,OAAMI,CAAN,EAAQ;AACLH,qBAAKD,OAAL;AACH;AACD7C,eAAGoB,UAAH,CAAc,KAAKT,QAAnB,EAA6B,YAAYmC,EAAZ,GAAiB,IAA9C,EAAoD,YAAU,CAAE,CAAhE;AACH;;;8BAEKD,O,EAAQ;AACV,gBAAIC,WAAJ;AACA,gBAAG;AACCA,qBAAKC,KAAKC,SAAL,CAAeH,OAAf,CAAL;AACH,aAFD,CAEC,OAAMI,CAAN,EAAQ;AACLH,qBAAKD,OAAL;AACH;AACD7C,eAAGoB,UAAH,CAAc,KAAKT,QAAnB,EAA6B,aAAamC,EAAb,GAAkB,IAA/C,EAAqD,YAAU,CAAE,CAAjE;AACH;;;8BAEKD,O,EAAQ;AACV,gBAAG,CAAC,KAAK1C,OAAL,CAAaK,KAAjB,EAAwB;AACxB,gBAAIsC,WAAJ;AACA,gBAAG;AACCA,qBAAKC,KAAKC,SAAL,CAAeH,OAAf,CAAL;AACH,aAFD,CAEC,OAAMI,CAAN,EAAQ;AACLH,qBAAKD,OAAL;AACH;AACD7C,eAAGoB,UAAH,CAAc,KAAKT,QAAnB,EAA6B,aAAamC,EAAb,GAAkB,IAA/C,EAAqD,YAAU,CAAE,CAAjE;AACH;;;;;;AAILI,OAAOC,OAAP,GAAiBjD,GAAjB","file":"Log.js","sourcesContent":["const fs = require('fs');\n\nclass Log {\n\n    constructor(options){\n        this.options = {\n            filename: \"log.log\",\n            filesize: 1000000,\n            logfolder: \"log\",\n            numfiles: 3,\n            debug: true\n        };\n        for (let attrname in options) {\n            if(this.options.hasOwnProperty(attrname)){\n                this.options[attrname] = options[attrname];\n            }\n        }\n        this.fullpath = this.options.logfolder + \"/\" + this.options.filename;\n        this.existingFiles = [];\n        const dir = this.options.logfolder;\n        const files = fs.readdirSync(dir);\n        const filename = this.options.filename;\n\n        files.forEach((file) => {\n            if(file.indexOf(filename) > -1){\n                this.existingFiles.push(file);\n            }\n        });\n\n        fs.appendFile(this.fullpath, \"[INFO] log file opened \\n\", () =>{\n            this.watcher = fs.watch(this.fullpath, (eventType, filename) =>{\n                this.rotate(eventType, filename);\n            });\n        });\n    }\n\n    close(){\n        this.watcher.close();\n    }\n\n    rotate(eventType, filename) {\n        if(eventType == \"change\"){\n            const filesize = this.options.filesize;\n            const numFiles = this.existingFiles.length - 1;\n            fs.stat(this.fullpath, (err, stats) => {\n                if(stats.size >= filesize){\n                    console.log(\"should rotate\");\n                    for(let x = 0; x < this.existingFiles.length; x++){\n                        let existingFile = this.existingFiles[x];\n                        if(existingFile != this.options.filename){\n                            let newName = this.fullpath + \".\" + (x + 1);\n                            fs.rename(this.options.logfolder + \"/\" + existingFile, newName, function(){});\n                        }\n                    }\n                    fs.writeFileSync(this.fullpath + \".0\", fs.readFileSync(this.fullpath));\n                    this.existingFiles.push(this.fullpath + \".\" + numFiles);\n                    let rand = Math.random();\n                    fs.writeFileSync(this.fullpath, \"file rotated: [\" + rand + \"]\");\n                    if(numFiles >= this.options.numfiles){\n                        fs.unlink(this.fullpath + \".\" + (this.existingFiles.length - 1), () => {\n                            this.existingFiles.pop();\n                        });\n                    }\n                }\n            });\n        }\n    }\n\n    log(message){\n        let st;\n        try{\n            st = JSON.stringify(message);\n        }catch(e){\n            st = message;\n        }\n        fs.appendFile(this.fullpath, \"[INFO] \" + st + \"\\n\", function(){});\n    }\n\n    error(message){\n        let st;\n        try{\n            st = JSON.stringify(message);\n        }catch(e){\n            st = message;\n        }\n        fs.appendFile(this.fullpath, \"[ERROR] \" + st + \"\\n\", function(){});\n    }\n\n    debug(message){\n        if(!this.options.debug) return;\n        let st;\n        try{\n            st = JSON.stringify(message);\n        }catch(e){\n            st = message;\n        }\n        fs.appendFile(this.fullpath, \"[DEBUG] \" + st + \"\\n\", function(){});\n    }\n}\n\n\nmodule.exports = Log;"]}