{"version":3,"sources":["Knn.es6"],"names":["Knn","log","db","fp_id","ap_ids","getDatabase","makeFeatures","features","forEach","row","row1","ap_id","Math","abs","Number","value","k","cb","keys","Object","done","data","key","all","query_get_features","replace","err","rows","push","length","makeGuess","distances","knn","feature","coord","x","y","pow","diff","x_y","distance","sqrt","reduce","a","b","sort","splice"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,G;AACF,iBAAYC,GAAZ,EAAiBC,EAAjB,EAAqBC,KAArB,EAA4BC,MAA5B,EAAmC;AAAA;;AAC/B,aAAKH,GAAL,GAAWA,GAAX;AACA,aAAKC,EAAL,GAAUA,GAAGG,WAAH,EAAV;AACA,aAAKF,KAAL,GAAaA,KAAb;AACA,aAAKG,YAAL,CAAkBF,MAAlB;AACH;;;;qCAEYA,M,EAAO;AAChB,gBAAIG,WAAW,EAAf;AACAH,mBAAOI,OAAP,CAAe,UAACC,GAAD,EAAS;AACpBL,uBAAOI,OAAP,CAAe,UAACE,IAAD,EAAU;AACrBH,6BAASE,IAAIE,KAAJ,GAAYD,KAAKC,KAA1B,IAAmCC,KAAKC,GAAL,CAASC,OAAOL,IAAIM,KAAX,IAAoBD,OAAOJ,KAAKK,KAAZ,CAA7B,CAAnC;AACH,iBAFD;AAGH,aAJD;AAKA,iBAAKR,QAAL,GAAgBA,QAAhB;AACH;;;qCAEYS,C,EAAGC,E,EAAG;AAAA;;AACf,gBAAIC,OAAOC,OAAOD,IAAP,CAAY,KAAKX,QAAjB,CAAX;AACA,gBAAIa,OAAO,CAAX;AACA,gBAAIC,OAAO,EAAX;;AAEAH,iBAAKV,OAAL,CAAa,UAACc,GAAD,EAAS;AAClB,sBAAKpB,EAAL,CAAQqB,GAAR,CAAY,aAAGC,kBAAH,CAAsBC,OAAtB,CAA8B,iBAA9B,EAAiD,MAAKlB,QAAL,CAAce,GAAd,CAAjD,CAAZ,EAAkF,CAACA,GAAD,EAAM,MAAKnB,KAAX,CAAlF,EAAqG,UAACuB,GAAD,EAAMC,IAAN,EAAe;AAChHN,yBAAKO,IAAL,CAAUD,IAAV;AACAP;AACA,wBAAGA,QAAQF,KAAKW,MAAhB,EAAuB;AACnB,8BAAKC,SAAL,CAAeT,IAAf,EAAqBJ,EAArB,EAAyBD,CAAzB;AACH;AACJ,iBAND;AAOH,aARD;AASH;;;kCAESK,I,EAAMJ,E,EAAID,C,EAAE;;AAElB,gBAAIe,YAAY,EAAhB;AACA,gBAAIC,MAAM,EAAV;;AAEAX,iBAAKb,OAAL,CAAa,UAACyB,OAAD,EAAa;AACtB,oBAAGA,QAAQJ,MAAR,IAAkB,CAArB,EAAwB;;AAExBI,wBAAQzB,OAAR,CAAgB,UAAC0B,KAAD,EAAW;AACvB,wBAAG,OAAOH,UAAUG,MAAMC,CAAN,GAAU,GAAV,GAAgBD,MAAME,CAAhC,CAAP,IAA8C,WAAjD,EAA6D;AACzDL,kCAAUG,MAAMC,CAAN,GAAU,GAAV,GAAgBD,MAAME,CAAhC,IAAqC,EAArC;AACH;AACDL,8BAAUG,MAAMC,CAAN,GAAU,GAAV,GAAgBD,MAAME,CAAhC,EAAmCR,IAAnC,CAAwChB,KAAKyB,GAAL,CAASH,MAAMI,IAAf,EAAqB,CAArB,CAAxC;AACH,iBALD;AAMH,aATD;AAUA,gBAAIpB,OAAOC,OAAOD,IAAP,CAAYa,SAAZ,CAAX;AACAb,iBAAKV,OAAL,CAAa,UAACc,GAAD,EAAS;AAClBU,oBAAIJ,IAAJ,CAAS;AACLW,yBAAKjB,GADA;AAELkB,8BAAU5B,KAAK6B,IAAL,CAAUV,UAAUT,GAAV,EAAeoB,MAAf,CAAsB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAAE,+BAAOD,IAAEC,CAAT;AAAa,qBAA/C,CAAV;AAFL,iBAAT;AAIH,aALD;AAMAZ,gBAAIa,IAAJ,CAAS,UAACF,CAAD,EAAIC,CAAJ,EAAU;AAAE,uBAAOD,EAAEH,QAAF,GAAaI,EAAEJ,QAAtB;AAAiC,aAAtD;AACAvB,eAAGe,IAAIc,MAAJ,CAAW,CAAX,EAAc9B,CAAd,CAAH;AACH;;;;;;kBAGUhB,G","file":"Knn.js","sourcesContent":["import Db from './Db';\n\nclass Knn {\n    constructor(log, db, fp_id, ap_ids){\n        this.log = log;\n        this.db = db.getDatabase();\n        this.fp_id = fp_id;\n        this.makeFeatures(ap_ids);\n    }\n\n    makeFeatures(ap_ids){\n        let features = {};\n        ap_ids.forEach((row) => {\n            ap_ids.forEach((row1) => {\n                features[row.ap_id + row1.ap_id] = Math.abs(Number(row.value) - Number(row1.value));\n            });\n        });\n        this.features = features;\n    }\n\n    getNeighbors(k, cb){\n        let keys = Object.keys(this.features);\n        let done = 0;\n        let data = [];\n\n        keys.forEach((key) => {\n            this.db.all(Db.query_get_features.replace(\":feature_value:\", this.features[key]), [key, this.fp_id], (err, rows) => {\n                data.push(rows);\n                done++;\n                if(done >= keys.length){\n                    this.makeGuess(data, cb, k);\n                }\n            });\n        });\n    }\n\n    makeGuess(data, cb, k){\n\n        let distances = {};\n        let knn = [];\n\n        data.forEach((feature) => {\n            if(feature.length == 0) return;\n\n            feature.forEach((coord) => {\n                if(typeof(distances[coord.x + \"_\" + coord.y]) == \"undefined\"){\n                    distances[coord.x + \"_\" + coord.y] = [];\n                }\n                distances[coord.x + \"_\" + coord.y].push(Math.pow(coord.diff, 2));\n            });\n        });\n        let keys = Object.keys(distances);\n        keys.forEach((key) => {\n            knn.push({\n                x_y: key,\n                distance: Math.sqrt(distances[key].reduce((a, b) => { return a+b; }))\n            });\n        });\n        knn.sort((a, b) => { return a.distance > b.distance; });\n        cb(knn.splice(0, k));\n    }\n}\n\nexport default Knn;"]}