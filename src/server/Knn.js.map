{"version":3,"sources":["Knn.es6"],"names":["Knn","log","db","fp_id","ap_ids","getDatabase","features","makeFeatures","forEach","row","row1","ap_id","Math","abs","Number","value","k","cb","keys","Object","done","knn","key","all","query_get_features","replace","err","rows","length","nei","coord","x_y","x","y","distance","pow","diff","sqrt","push","makeGuess","sort","a","b","splice"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,G;AACF,iBAAYC,GAAZ,EAAiBC,EAAjB,EAAqBC,KAArB,EAA4BC,MAA5B,EAAmC;AAAA;;AAC/B,aAAKH,GAAL,GAAWA,GAAX;AACA,aAAKC,EAAL,GAAUA,GAAGG,WAAH,EAAV;AACA,aAAKF,KAAL,GAAaA,KAAb;AACA,aAAKG,QAAL,GAAgB,KAAKC,YAAL,CAAkBH,MAAlB,CAAhB;AACH;;;;qCAEYA,M,EAAO;AAChB,gBAAIE,WAAW,EAAf;AACAF,mBAAOI,OAAP,CAAe,UAACC,GAAD,EAAS;AACpBL,uBAAOI,OAAP,CAAe,UAACE,IAAD,EAAU;AACrBJ,6BAASG,IAAIE,KAAJ,GAAYD,KAAKC,KAA1B,IAAmCC,KAAKC,GAAL,CAASC,OAAOL,IAAIM,KAAX,IAAoBD,OAAOJ,KAAKK,KAAZ,CAA7B,CAAnC;AACH,iBAFD;AAGH,aAJD;AAKA,mBAAOT,QAAP;AACH;;;qCAEYU,C,EAAGC,E,EAAG;AAAA;;AACf,gBAAIC,OAAOC,OAAOD,IAAP,CAAY,KAAKZ,QAAjB,CAAX;AACA,gBAAIc,OAAO,CAAX;AACA,gBAAIC,MAAM,EAAV;AACAH,iBAAKV,OAAL,CAAa,UAACc,GAAD,EAAS;AAClB,sBAAKpB,EAAL,CAAQqB,GAAR,CAAY,aAAGC,kBAAH,CAAsBC,OAAtB,CAA8B,iBAA9B,EAAiD,MAAKnB,QAAL,CAAcgB,GAAd,CAAjD,CAAZ,EAAkF,CAACA,GAAD,EAAM,MAAKnB,KAAX,CAAlF,EAAqG,UAACuB,GAAD,EAAMC,IAAN,EAAe;AAChH,wBAAGA,KAAKC,MAAL,IAAe,CAAlB,EAAoB;AAChB,4BAAIC,MAAM,IAAV;AACAF,6BAAKnB,OAAL,CAAa,UAACsB,KAAD,EAAW;AACpB,gCAAGD,OAAO,IAAV,EAAe;AACXA,sCAAM;AACFE,yCAAKD,MAAME,CAAN,GAAU,GAAV,GAAgBF,MAAMG,CADzB;AAEFD,uCAAGlB,OAAOgB,MAAME,CAAb,CAFD;AAGFC,uCAAGnB,OAAOgB,MAAMG,CAAb,CAHD;AAIFC,8CAAU;AAJR,iCAAN;AAMH;AACDL,gCAAIK,QAAJ,IAAgBtB,KAAKuB,GAAL,CAASL,MAAMM,IAAf,EAAqB,CAArB,CAAhB;AACH,yBAVD;AAWAP,4BAAIK,QAAJ,GAAetB,KAAKyB,IAAL,CAAUR,IAAIK,QAAd,CAAf;AACAb,4BAAIiB,IAAJ,CAAST,GAAT;AACH;AACDT;AACA,wBAAGA,QAAQF,KAAKU,MAAhB,EAAuB;AACnB,8BAAKW,SAAL,CAAelB,GAAf,EAAoBJ,EAApB,EAAwBD,CAAxB;AACH;AACJ,iBArBD;AAsBH,aAvBD;AAwBH;;;kCAESK,G,EAAKJ,E,EAAID,C,EAAE;AACjBK,gBAAImB,IAAJ,CAAS,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAAE,uBAAOD,EAAEP,QAAF,GAAaQ,EAAER,QAAtB;AAAiC,aAAtD;AACAb,kBAAMA,IAAIsB,MAAJ,CAAW,CAAX,EAAc3B,CAAd,CAAN;AACAC,eAAGI,GAAH;AACH;;;;;;kBAGUrB,G","file":"Knn.js","sourcesContent":["import Db from './Db';\n\nclass Knn {\n    constructor(log, db, fp_id, ap_ids){\n        this.log = log;\n        this.db = db.getDatabase();\n        this.fp_id = fp_id;\n        this.features = this.makeFeatures(ap_ids);\n    }\n\n    makeFeatures(ap_ids){\n        let features = {};\n        ap_ids.forEach((row) => {\n            ap_ids.forEach((row1) => {\n                features[row.ap_id + row1.ap_id] = Math.abs(Number(row.value) - Number(row1.value));\n            });\n        });\n        return features;\n    }\n\n    getNeighbors(k, cb){\n        let keys = Object.keys(this.features);\n        let done = 0;\n        let knn = [];\n        keys.forEach((key) => {\n            this.db.all(Db.query_get_features.replace(\":feature_value:\", this.features[key]), [key, this.fp_id], (err, rows) => {\n                if(rows.length != 0){\n                    let nei = null;\n                    rows.forEach((coord) => {\n                        if(nei == null){\n                            nei = {\n                                x_y: coord.x + \"_\" + coord.y,\n                                x: Number(coord.x),\n                                y: Number(coord.y),\n                                distance: 0\n                            }\n                        }\n                        nei.distance += Math.pow(coord.diff, 2);\n                    });\n                    nei.distance = Math.sqrt(nei.distance);\n                    knn.push(nei);\n                }\n                done++;\n                if(done >= keys.length){\n                    this.makeGuess(knn, cb, k);\n                }\n            });\n        });\n    }\n\n    makeGuess(knn, cb, k){\n        knn.sort((a, b) => { return a.distance > b.distance; });\n        knn = knn.splice(0, k);\n        cb(knn);\n    }\n}\n\nexport default Knn;"]}