{"version":3,"sources":["Knn.es6"],"names":["Knn","log","db","fp_id","ap_ids","getDatabase","features","makeFeatures","forEach","row","row1","ap_id","Math","abs","Number","value","k","cb","keys","Object","done","knn","key","all","query_get_features","replace","err","rows","length","coord","x","y","x_y","distance","pow","diff","makeGuess","map","obj","sqrt","sort","a","b","splice"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,G;AACF,iBAAYC,GAAZ,EAAiBC,EAAjB,EAAqBC,KAArB,EAA4BC,MAA5B,EAAmC;AAAA;;AAC/B,aAAKH,GAAL,GAAWA,GAAX;AACA,aAAKC,EAAL,GAAUA,GAAGG,WAAH,EAAV;AACA,aAAKF,KAAL,GAAaA,KAAb;AACA,aAAKG,QAAL,GAAgB,KAAKC,YAAL,CAAkBH,MAAlB,CAAhB;AACH;;;;qCAEYA,M,EAAO;AAChB,gBAAIE,WAAW,EAAf;AACAF,mBAAOI,OAAP,CAAe,UAACC,GAAD,EAAS;AACpBL,uBAAOI,OAAP,CAAe,UAACE,IAAD,EAAU;AACrBJ,6BAASG,IAAIE,KAAJ,GAAYD,KAAKC,KAA1B,IAAmCC,KAAKC,GAAL,CAASC,OAAOL,IAAIM,KAAX,IAAoBD,OAAOJ,KAAKK,KAAZ,CAA7B,CAAnC;AACH,iBAFD;AAGH,aAJD;AAKA,mBAAOT,QAAP;AACH;;;qCAEYU,C,EAAGC,E,EAAG;AAAA;;AACf,gBAAIC,OAAOC,OAAOD,IAAP,CAAY,KAAKZ,QAAjB,CAAX;AACA,gBAAIc,OAAO,CAAX;AACA,gBAAIC,MAAM,EAAV;AACAH,iBAAKV,OAAL,CAAa,UAACc,GAAD,EAAS;AAClB,sBAAKpB,EAAL,CAAQqB,GAAR,CAAY,aAAGC,kBAAH,CAAsBC,OAAtB,CAA8B,iBAA9B,EAAiD,MAAKnB,QAAL,CAAcgB,GAAd,CAAjD,CAAZ,EAAkF,CAACA,GAAD,EAAM,MAAKnB,KAAX,CAAlF,EAAqG,UAACuB,GAAD,EAAMC,IAAN,EAAe;;AAEhH,wBAAG,OAAOA,IAAP,IAAgB,WAAhB,IAA+BA,KAAKC,MAAL,IAAe,CAAjD,EAAmD;;AAE/CD,6BAAKnB,OAAL,CAAa,UAACqB,KAAD,EAAW;AACpB,gCAAIP,MAAMO,MAAMC,CAAN,GAAU,GAAV,GAAgBD,MAAME,CAAhC;AACA,gCAAG,OAAOV,IAAIC,GAAJ,CAAP,IAAoB,WAAvB,EAAmC;AAC/BD,oCAAIC,GAAJ,IAAW;AACPU,yCAAKH,MAAMC,CAAN,GAAU,GAAV,GAAgBD,MAAME,CADpB;AAEPD,uCAAGhB,OAAOe,MAAMC,CAAb,CAFI;AAGPC,uCAAGjB,OAAOe,MAAME,CAAb,CAHI;AAIPE,8CAAU;AAJH,iCAAX;AAMH;AACDZ,gCAAIC,GAAJ,EAASW,QAAT,IAAqBrB,KAAKsB,GAAL,CAASL,MAAMM,IAAf,EAAqB,CAArB,CAArB;AACH,yBAXD;AAYH;AACDf;AACA,wBAAGA,QAAQF,KAAKU,MAAhB,EAAuB;AACnB,8BAAKQ,SAAL,CAAef,GAAf,EAAoBJ,EAApB,EAAwBD,CAAxB;AACH;AACJ,iBArBD;AAsBH,aAvBD;AAwBH;;;kCAESK,G,EAAKJ,E,EAAID,C,EAAE;AACjBK,kBAAMF,OACDD,IADC,CACIG,GADJ,EAEDgB,GAFC,CAEG,UAACf,GAAD,EAAS;AACV,oBAAIgB,MAAMjB,IAAIC,GAAJ,CAAV;AACAgB,oBAAIL,QAAJ,GAAerB,KAAK2B,IAAL,CAAUD,IAAIL,QAAd,CAAf;AACA,uBAAOZ,IAAIC,GAAJ,CAAP;AACH,aANC,CAAN;AAOAD,kBAAMA,IAAImB,IAAJ,CAAS,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACrB,oBAAGD,EAAER,QAAF,GAAaS,EAAET,QAAlB,EAA2B;AACvB,2BAAO,CAAP;AACH,iBAFD,MAEM,IAAGS,EAAET,QAAF,GAAaQ,EAAER,QAAlB,EAA2B;AAC7B,2BAAO,CAAC,CAAR;AACH;AACD,uBAAO,CAAP;AACH,aAPK,CAAN;AAQAZ,kBAAMA,IAAIsB,MAAJ,CAAW,CAAX,EAAc3B,CAAd,CAAN;AACAC,eAAGI,GAAH;AACH;;;;;;kBAGUrB,G","file":"Knn.js","sourcesContent":["import Db from './Db';\n\nclass Knn {\n    constructor(log, db, fp_id, ap_ids){\n        this.log = log;\n        this.db = db.getDatabase();\n        this.fp_id = fp_id;\n        this.features = this.makeFeatures(ap_ids);\n    }\n\n    makeFeatures(ap_ids){\n        let features = {};\n        ap_ids.forEach((row) => {\n            ap_ids.forEach((row1) => {\n                features[row.ap_id + row1.ap_id] = Math.abs(Number(row.value) - Number(row1.value));\n            });\n        });\n        return features;\n    }\n\n    getNeighbors(k, cb){\n        let keys = Object.keys(this.features);\n        let done = 0;\n        let knn = {};\n        keys.forEach((key) => {\n            this.db.all(Db.query_get_features.replace(\":feature_value:\", this.features[key]), [key, this.fp_id], (err, rows) => {\n\n                if(typeof(rows) != \"undefined\" && rows.length != 0){\n\n                    rows.forEach((coord) => {\n                        let key = coord.x + \"_\" + coord.y;\n                        if(typeof(knn[key]) == \"undefined\"){\n                            knn[key] = {\n                                x_y: coord.x + \"_\" + coord.y,\n                                x: Number(coord.x),\n                                y: Number(coord.y),\n                                distance: 0\n                            }\n                        }\n                        knn[key].distance += Math.pow(coord.diff, 2);\n                    });\n                }\n                done++;\n                if(done >= keys.length){\n                    this.makeGuess(knn, cb, k);\n                }\n            });\n        });\n    }\n\n    makeGuess(knn, cb, k){\n        knn = Object\n            .keys(knn)\n            .map((key) => {\n                let obj = knn[key];\n                obj.distance = Math.sqrt(obj.distance);\n                return knn[key];\n            });\n        knn = knn.sort((a, b) => {\n            if(a.distance > b.distance){\n                return 1;\n            }else if(b.distance > a.distance){\n                return -1;\n            }\n            return 0;\n        });\n        knn = knn.splice(0, k);\n        cb(knn);\n    }\n}\n\nexport default Knn;"]}