{"version":3,"sources":["RestServer.es6"],"names":["express","require","bodyParser","pjson","Logger","Db","fs","Utils","uuid","RestServer","id","v4","oldUUID","readFileSync","e","writeFileSync","log","logfolder","builder_log_folder","filename","filesize","numfiles","db","app","use","json","limit","urlencoded","extended","static","req","res","header","getDatabaseVersion","err","rows","length","send","databaseVersion","value","success","data","body","cleanData","error","isNaN","layout_images","updateDatabase","readFile","file","status","replace","getServerIp","getFloorPlans","forEach","row","layout_image","JSON","parse","payload","message","saveReadings","createTables","get","post","getDeviceDescription","sendFile","process","cwd","getFloorplans","listen","builder_rest_port","module","exports"],"mappings":"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","file":"RestServer.js","sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst pjson = require('../package.json');\nconst Logger = require('./Log.js');\nlet Db = require('./Db.js');\nconst fs = require('fs');\nconst Utils = require('./Utils.js');\nconst uuid = require('uuid');\n\n/**\n * RestServer class is used to power the rest server that will communicate with the\n * mobile phone on the local wifi network. This server will respond to upnp devices\n * with the device description xml file as well as handle all saving and fetching of data.\n *\n * The rest server uses express.js and listens on a port configured by builder_rest_port\n * parameter in the package.json file within the public folder\n *\n * @author Rich Wandell <richwandell@gmail.com>\n */\nclass RestServer{\n\n\n\n    constructor(){\n        this.id = uuid.v4();\n        try {\n            let oldUUID = fs.readFileSync(\".uuid\", \"utf8\");\n            this.id = oldUUID;\n        }catch(e){\n            fs.writeFileSync(\".uuid\", this.id);\n        }\n\n        this.log = new Logger({\n            logfolder: pjson.builder_log_folder,\n            filename: \"rest.log\",\n            filesize: 5000000,\n            numfiles: 3\n        });\n        this.db = new Db(this.log);\n        this.app = express();\n        this.app.use(bodyParser.json({limit: '50mb'}));\n        this.app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\n        this.app.use('/builder', express.static('builder'))\n    }\n\n    /**\n     * Request handler for the /rest/databaseVersion endpoint\n     * @param req\n     * @param res\n     */\n    getDatabaseVersion(req, res){\n        const log = this.log;\n        const db = this.db;\n        log.log(\"/rest/databaseVersion\");\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\n        res.header('Content-Type', 'application/javascript');\n        db.getDatabaseVersion(function(err, rows){\n            if(rows.length > 0){\n                res.send({databaseVersion: rows[0].value, success: true});\n            }else{\n                res.send({databaseVersion: 0, success: true});\n            }\n        });\n    }\n\n    /**\n     * Save handler for saving layout images from the UI\n     * @param req\n     * @param res\n     */\n    updateDatabase(req, res){\n        let log = this.log;\n        let db = this.db;\n        const data = req.body;\n        let cleanData = {};\n        let error = false;\n\n        log.log(\"/rest/updateDatabase\");\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\n        res.header('Content-Type', 'application/javascript');\n        log.log(req.body);\n\n        if(typeof(data.databaseVersion) != \"undefined\"){\n            if(!isNaN(data.databaseVersion)){\n                cleanData.databaseVersion = data.databaseVersion;\n            }else{\n                error = true;\n            }\n            if(typeof(data.layout_images) != \"undefined\"){\n                if(data.layout_images.length > 0){\n                    cleanData.layout_images = data.layout_images;\n                }else{\n                    error = true;\n                }\n            }else{\n                error = true;\n            }\n        }else{\n            error = true;\n        }\n\n        if(!error){\n            db.updateDatabase(cleanData, function(err, rows){\n                res.send({success: true});\n            });\n        }else{\n            res.send({success: false});\n        }\n\n        log.log(req.body);\n    }\n\n    /**\n     * Returns the device description xml file for upnp readers\n     * @param req\n     * @param res\n     */\n    getDeviceDescription(req, res){\n        let log = this.log;\n        let id = this.id;\n        log.log(\"devicedescription.xml\");\n        fs.readFile('devicedescription.xml', \"binary\", function (err, file) {\n            if (err) {\n                res.header(\"Content-Type\", \"text/plain\");\n                res.status(500).send(err);\n                return;\n            }\n            file = file.replace(/\\{\\{UDN\\}\\}/, \"uuid:\" + id);\n            file = file.replace(/\\{\\{END\\}\\}/, \"http://\" + Utils.getServerIp() + \":8888/rest/\");\n            res.header(\"Access-Control-Allow-Origin\", \"*\");\n            res.header(\"Content-Type\", \"text/xml\");\n            res.send(file);\n        });\n    }\n\n    /**\n     * Returns all of the layout image records as a json array\n     * @param req\n     * @param res\n     */\n    getFloorplans(req, res){\n        let log = this.log;\n        let db = this.db;\n        log.log(\"/rest/floorplans\");\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\n        res.header('Content-Type', 'application/javascript');\n        db.getFloorPlans(function(err, rows){\n            rows.forEach(function(row){\n                if(typeof(row.layout_image) != \"undefined\"){\n                    row.layout_image = JSON.parse(row.layout_image);\n                }\n            });\n            res.send(rows);\n        });\n    }\n\n    saveReadings(req, res){\n        let log = this.log;\n        log.log(\"/rest/saveReadings\");\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\n        res.header('Content-Type', 'application/javascript');\n        const data = req.body;\n        log.log(data);\n        if(typeof(data.payload) == \"undefined\"){\n            return res.send({success: false, message: \"missing payload\"});\n        }\n        this.db.saveReadings(data.payload);\n        res.send({success: true});\n    }\n\n    /**\n     * Routes are defined here and mapped to actions\n     */\n    startServer() {\n        const db = this.db;\n        const log = this.log;\n        const app = this.app;\n        db.createTables(log);\n\n        app.get('/rest/databaseVersion', (req, res) => {\n            this.getDatabaseVersion(req, res);\n        });\n\n        app.post('/rest/updateDatabase', (req, res) => {\n            this.updateDatabase(req, res);\n        });\n\n        app.get('/devicedescription.xml', (req, res) => {\n            this.getDeviceDescription(req, res);\n        });\n\n        app.get(\"/icon24.png\", (req, res) => {\n            this.log.log(\"icon24.png\");\n            res.header(\"Access-Control-Allow-Origin\", \"*\");\n            res.sendFile(process.cwd() + '/src/icon24.png');\n        });\n\n        app.get(\"/rest/floorplans\", (req, res) => {\n            this.getFloorplans(req, res);\n        });\n\n        app.post(\"/rest/saveReadings\", (req, res) => {\n            this.saveReadings(req, res);\n        });\n\n        app.listen(pjson.builder_rest_port, function () {\n            log.log('Server Started')\n        });\n    }\n\n}\n\n\n\nmodule.exports = RestServer;"]}