{"version":3,"sources":["../../src/server/Server.es6"],"names":["numCPUs","require","cpus","length","debug","process","execArgv","indexOf","cluster","pjson","uuid","fs","Server","data","send","onWorkerMessage","numWorker","workers","configure","runMainWorker","run","isMaster","i","createWorker","w","fork","on","message","push","console","log","pid","socket","id","v4","oldUUID","readFileSync","e","writeFileSync","logfolder","builder_log_folder","filename","filesize","numfiles","db","createTables","onMainMessage","worker","code","signal","exitedAfterDisconnect","upnp","startBroadcast","rest","createServer","listen","builder_ws_port","getLog","getServer","startServer","builder_rest_port"],"mappings":"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","file":"Server.js","sourcesContent":["import Ssdp from './Ssdp';\nimport RestServer from './RestServer';\nimport WebSocketServer from './WebSocketServer';\nimport Logger from './Log';\nimport Db from './Db';\n\nconst numCPUs = require('os').cpus().length;\nconst debug = process.execArgv.indexOf('--debug') > -1 || process.execArgv.indexOf('--debug-brk') > -1;\nconst cluster = require('cluster');\nconst pjson = require('../../package.json');\nconst uuid = require('uuid');\nconst fs = require('fs');\n\nclass Server {\n\n    send(data){\n        if(!this.debug) {\n            process.send(data);\n        }else{\n            this.onWorkerMessage(data);\n        }\n    }\n\n    constructor(numWorker: Number, debug: boolean) {\n        this.debug = debug;\n        this.workers = [];\n        this.configure();\n\n        if(debug){\n            this.runMainWorker();\n            this.run();\n        }else if(cluster.isMaster){\n            this.runMainWorker();\n\n            for (let i = 0; i < numWorker; i++) {\n                this.createWorker();\n            }\n        } else {\n            this.run();\n        }\n    }\n\n    createWorker(){\n        let w = cluster.fork();\n        w.on('message', (message) => {\n            this.onWorkerMessage(message);\n        });\n        this.workers.push(w);\n    }\n\n    onMainMessage(message) {\n        console.log(\"Main Message: \" + process.pid);\n    }\n\n    onWorkerMessage(message) {\n        this.socket.send(message);\n    }\n\n    configure(){\n        this.id = uuid.v4();\n        try {\n            let oldUUID = fs.readFileSync(\".uuid\", \"utf8\");\n            this.id = oldUUID;\n        }catch(e){\n            fs.writeFileSync(\".uuid\", this.id);\n        }\n\n        this.log = new Logger({\n            logfolder: pjson.builder_log_folder,\n            filename: \"rest.log\",\n            filesize: 5000000,\n            numfiles: 3\n        });\n        this.db = new Db(this.log);\n        this.db.createTables(this.log);\n    }\n\n    runMainWorker(){\n\n        process.on('message', (message) => {\n            this.onMainMessage(message);\n        });\n\n        cluster.on('exit', (worker, code, signal) => {\n            if (worker.exitedAfterDisconnect === false) {\n                this.createWorker();\n            }\n        });\n\n        this.upnp = new Ssdp();\n        this.upnp.startBroadcast();\n\n        const rest = new RestServer(this);\n        rest.createServer();\n        rest.listen(pjson.builder_ws_port);\n\n        this.socket = new WebSocketServer(rest.getLog(), rest.getServer());\n        this.socket.startServer();\n\n        return rest;\n    }\n\n    run() {\n        const rest = new RestServer(this);\n        rest.createServer();\n        rest.listen(pjson.builder_rest_port);\n    }\n}\n\nnew Server(numCPUs, debug);\n\n\n\n\n"]}