{"version":3,"sources":["../../src/server/Server.es6"],"names":["numCPUs","require","cpus","length","debug","process","execArgv","forEach","item","indexOf","cluster","pjson","uuid","fs","Server","data","send","onWorkerMessage","numWorker","workers","particles","configure","runMainWorker","run","isMaster","i","createWorker","w","fork","on","message","push","action","undefined","db","clearFeaturesCache","fp_id","id","all_particles","isDead","messageWorkers","onMainMessage","socket","guess","type","neighbors","clusters","v4","oldUUID","readFileSync","e","writeFileSync","log","logfolder","builder_log_folder","filename","filesize","numfiles","trackingLog","builder_db_name","worker","code","signal","exitedAfterDisconnect","upnp","startBroadcast","rest","createServer","listen","builder_ws_port","getLog","getServer","startServer","builder_rest_port"],"mappings":"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","file":"Server.js","sourcesContent":["import Ssdp from './Ssdp';\nimport RestServer from './RestServer';\nimport WebSocketServer from './WebSocketServer';\nimport Logger from './Log';\nimport Db from './Db';\n\nconst numCPUs = require('os').cpus().length;\nvar debug = false;\n\nprocess.execArgv.forEach((item) => {\n    if(item.indexOf('--debug') > -1 || item.indexOf('--debug-brk') > -1){\n        debug = true;\n    }\n});\n\nconst cluster = require('cluster');\nconst pjson = require('../../package.json');\nconst uuid = require('uuid');\nconst fs = require('fs');\n\nclass Server {\n\n    send(data){\n        if(!this.debug) {\n            process.send(data);\n        }else{\n            this.onWorkerMessage(data);\n        }\n    }\n\n    constructor(numWorker: Number, debug: boolean) {\n        this.debug = debug;\n        this.workers = [];\n        this.particles = {};\n\n        this.configure();\n\n        if(debug){\n            this.runMainWorker();\n            this.run();\n        }else if(cluster.isMaster){\n            this.runMainWorker();\n\n            for (let i = 0; i < numWorker; i++) {\n                this.createWorker();\n            }\n        } else {\n            this.run();\n        }\n    }\n\n    createWorker(){\n        let w = cluster.fork();\n        // Receive messages from this worker and handle them in the master process.\n        w.on('message', (message) => {\n            this.onWorkerMessage(message);\n        });\n        this.workers.push(w);\n    }\n\n    onMainMessage(message) {\n        if(message.action === undefined) return false;\n        switch(message.action){\n            case 'NEW_READING':\n                this.db.clearFeaturesCache(message.fp_id);\n                break;\n\n            case 'LOCALIZE':\n                this.particles[message.id] = message.all_particles;\n                break;\n        }\n    }\n\n    messageWorkers(message){\n        this.workers.forEach((w) => {\n            if (!w.isDead()) {\n                w.send(message);\n            }\n        });\n    }\n\n    onWorkerMessage(message) {\n        if(message.action === undefined) return false;\n        switch(message.action){\n            case 'NEW_READING':\n                if(!this.debug) {\n                    this.messageWorkers(message);\n                }else{\n                    this.onMainMessage(message);\n                }\n                break;\n\n            case 'LOCALIZE':\n                this.socket.send({\n                    action: 'LOCALIZE',\n                    id: message.id,\n                    guess: message.guess,\n                    type: message.type,\n                    particles: message.particles,\n                    neighbors: message.neighbors,\n                    clusters: message.clusters\n                });\n                if(!this.debug) {\n                    this.messageWorkers(message);\n                }else{\n                    this.onMainMessage(message);\n                }\n                break;\n        }\n    }\n\n    configure(){\n        this.id = uuid.v4();\n        try {\n            let oldUUID = fs.readFileSync(\".uuid\", \"utf8\");\n            this.id = oldUUID;\n        }catch(e){\n            fs.writeFileSync(\".uuid\", this.id);\n        }\n\n        this.log = new Logger({\n            logfolder: pjson.builder_log_folder,\n            filename: \"rest.log\",\n            filesize: 5000000,\n            numfiles: 3\n        });\n        this.trackingLog = new Logger({\n            logfolder: pjson.builder_log_folder,\n            filename: \"tracking.log\",\n            filesize: 5000000,\n            numfiles: 3\n        });\n        this.db = new Db(this.log, pjson.builder_db_name);\n    }\n\n    runMainWorker(){\n        cluster.on('exit', (worker, code, signal) => {\n            if (worker.exitedAfterDisconnect === false) {\n                this.createWorker();\n            }\n        });\n\n        this.upnp = new Ssdp();\n        this.upnp.startBroadcast();\n\n        const rest = new RestServer(this);\n        rest.createServer();\n        rest.listen(pjson.builder_ws_port);\n\n        this.socket = new WebSocketServer(rest.getLog(), rest.getServer());\n        this.socket.startServer();\n\n        return rest;\n    }\n\n    run() {\n        // Receive messages from the master process.\n        process.on('message', (message) => {\n            this.onMainMessage(message);\n        });\n        const rest = new RestServer(this);\n        rest.createServer();\n        rest.listen(pjson.builder_rest_port);\n    }\n}\n\nnew Server(numCPUs, debug);\n\n\n\n\n"]}