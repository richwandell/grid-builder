{"version":3,"sources":["../../src/server/Log.es6"],"names":["fs","require","Log","options","filename","filesize","logfolder","numfiles","debug","timestamp","attrname","hasOwnProperty","fullpath","existingFiles","dir","files","readdirSync","forEach","file","indexOf","push","dt","getDateTime","appendFile","watcher","watch","eventType","rotate","Date","split","date","crap","trim","close","numFiles","length","stat","err","stats","size","console","log","x","existingFile","newName","rename","writeFileSync","readFileSync","rand","Math","random","unlink","pop","message","level","json","st","makeMessage","fst","JSON","stringify","e"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;;IAEMC,G;AAEF,iBAAYC,OAAZ,EAAoB;AAAA;;AAAA;;AAChB,aAAKA,OAAL,GAAe;AACXC,sBAAU,SADC;AAEXC,sBAAU,OAFC;AAGXC,uBAAW,KAHA;AAIXC,sBAAU,CAJC;AAKXC,mBAAO,IALI;AAMXC,uBAAW;AANA,SAAf;AAQA,aAAK,IAAIC,QAAT,IAAqBP,OAArB,EAA8B;AAC1B,gBAAG,KAAKA,OAAL,CAAaQ,cAAb,CAA4BD,QAA5B,CAAH,EAAyC;AACrC,qBAAKP,OAAL,CAAaO,QAAb,IAAyBP,QAAQO,QAAR,CAAzB;AACH;AACJ;AACD,aAAKE,QAAL,GAAgB,KAAKT,OAAL,CAAaG,SAAb,GAAyB,GAAzB,GAA+B,KAAKH,OAAL,CAAaC,QAA5D;AACA,aAAKS,aAAL,GAAqB,EAArB;AACA,YAAMC,MAAM,KAAKX,OAAL,CAAaG,SAAzB;AACA,YAAMS,QAAQf,GAAGgB,WAAH,CAAeF,GAAf,CAAd;AACA,YAAMV,WAAW,KAAKD,OAAL,CAAaC,QAA9B;;AAEAW,cAAME,OAAN,CAAc,UAACC,IAAD,EAAU;AACpB,gBAAGA,KAAKC,OAAL,CAAaf,QAAb,IAAyB,CAAC,CAA7B,EAA+B;AAC3B,sBAAKS,aAAL,CAAmBO,IAAnB,CAAwBF,IAAxB;AACH;AACJ,SAJD;AAKA,YAAMG,KAAK,KAAKC,WAAL,EAAX;AACAtB,WAAGuB,UAAH,CAAc,KAAKX,QAAnB,cAAuCS,EAAvC,2BAAiE,YAAK;AAClE,kBAAKG,OAAL,GAAexB,GAAGyB,KAAH,CAAS,MAAKb,QAAd,EAAwB,UAACc,SAAD,EAAYtB,QAAZ,EAAwB;AAC3D,sBAAKuB,MAAL,CAAYD,SAAZ,EAAuBtB,QAAvB;AACH,aAFc,CAAf;AAGH,SAJD;AAKH;;;;sCAEY;AAAA,yBACU,CAAC,IAAIwB,IAAJ,KAAa,EAAd,EAAkBC,KAAlB,CAAwB,KAAxB,CADV;AAAA;AAAA,gBACJC,IADI;AAAA,gBACEC,IADF;;AAET,mBAAOD,KAAKE,IAAL,EAAP;AACH;;;gCAEM;AACH,iBAAKR,OAAL,CAAaS,KAAb;AACH;;;+BAEMP,S,EAAWtB,Q,EAAU;AAAA;;AACxB,gBAAGsB,aAAa,QAAhB,EAAyB;AACrB,oBAAMrB,WAAW,KAAKF,OAAL,CAAaE,QAA9B;AACA,oBAAM6B,WAAW,KAAKrB,aAAL,CAAmBsB,MAAnB,GAA4B,CAA7C;AACAnC,mBAAGoC,IAAH,CAAQ,KAAKxB,QAAb,EAAuB,UAACyB,GAAD,EAAMC,KAAN,EAAgB;AACnC,wBAAGA,MAAMC,IAAN,IAAclC,QAAjB,EAA0B;AACtBmC,gCAAQC,GAAR,CAAY,eAAZ;AACA,6BAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,OAAK7B,aAAL,CAAmBsB,MAAtC,EAA8CO,GAA9C,EAAkD;AAC9C,gCAAIC,eAAe,OAAK9B,aAAL,CAAmB6B,CAAnB,CAAnB;AACA,gCAAGC,gBAAgB,OAAKxC,OAAL,CAAaC,QAAhC,EAAyC;AACrC,oCAAIwC,UAAU,OAAKhC,QAAL,GAAgB,GAAhB,IAAuB8B,IAAI,CAA3B,CAAd;AACA1C,mCAAG6C,MAAH,CAAU,OAAK1C,OAAL,CAAaG,SAAb,GAAyB,GAAzB,GAA+BqC,YAAzC,EAAuDC,OAAvD,EAAgE,YAAU,CAAE,CAA5E;AACH;AACJ;AACD5C,2BAAG8C,aAAH,CAAiB,OAAKlC,QAAL,GAAgB,IAAjC,EAAuCZ,GAAG+C,YAAH,CAAgB,OAAKnC,QAArB,CAAvC;AACA,+BAAKC,aAAL,CAAmBO,IAAnB,CAAwB,OAAKR,QAAL,GAAgB,GAAhB,GAAsBsB,QAA9C;AACA,4BAAIc,OAAOC,KAAKC,MAAL,EAAX;AACAlD,2BAAG8C,aAAH,CAAiB,OAAKlC,QAAtB,EAAgC,oBAAoBoC,IAApB,GAA2B,GAA3D;AACA,4BAAGd,YAAY,OAAK/B,OAAL,CAAaI,QAA5B,EAAqC;AACjCP,+BAAGmD,MAAH,CAAU,OAAKvC,QAAL,GAAgB,GAAhB,IAAuB,OAAKC,aAAL,CAAmBsB,MAAnB,GAA4B,CAAnD,CAAV,EAAiE,YAAM;AACnE,uCAAKtB,aAAL,CAAmBuC,GAAnB;AACH,6BAFD;AAGH;AACJ;AACJ,iBApBD;AAqBH;AACJ;;;4BAEGC,O,EAAqC;AAAA,gBAA5BC,KAA4B,uEAApB,MAAoB;AAAA,gBAAZC,IAAY,uEAAL,IAAK;;AACrC,gBAAIC,WAAJ;AACA,gBAAGD,IAAH,EAAS;AACLC,qBAAK,KAAKC,WAAL,CAAiBJ,OAAjB,CAAL;AACH,aAFD,MAEK;AACDG,qBAAKH,OAAL;AACH;AACD,gBAAIK,YAAUJ,KAAV,MAAJ;AACA,gBAAG,KAAKnD,OAAL,CAAaM,SAAhB,EAA0B;AACtB,oBAAIY,KAAK,KAAKC,WAAL,EAAT;AACAoC,6BAAWrC,EAAX;AACH;AACDqC,mBAAO,GAAP;;AAEAA,mBAAOF,EAAP;AACAxD,eAAGuB,UAAH,CAAc,KAAKX,QAAnB,EAA6B8C,MAAM,IAAnC,EAAyC,YAAU,CAAE,CAArD;AACH;;;8BAEKL,O,EAAQ;AACV,gBAAMG,KAAK,KAAKC,WAAL,CAAiBJ,OAAjB,CAAX;AACA,iBAAKZ,GAAL,CAASe,EAAT,EAAa,OAAb,EAAsB,KAAtB;AACH;;;8BAEKH,O,EAAQ;AACV,gBAAG,CAAC,KAAKlD,OAAL,CAAaK,KAAjB,EAAwB;AACxB,gBAAMgD,KAAK,KAAKC,WAAL,CAAiBJ,OAAjB,CAAX;AACA,iBAAKZ,GAAL,CAASe,EAAT,EAAa,OAAb,EAAsB,KAAtB;AACH;;;oCAEWH,O,EAAQ;AAChB,gBAAG,OAAOA,OAAP,KAAoB,QAAvB,EAAgC;AAC5B,uBAAOA,OAAP;AACH;AACD,gBAAIG,WAAJ;AACA,gBAAG;AACCA,qBAAKG,KAAKC,SAAL,CAAeP,OAAf,CAAL;AACH,aAFD,CAEC,OAAMQ,CAAN,EAAQ;AACLL,qBAAKH,OAAL;AACH;AACD,mBAAOG,EAAP;AACH;;;;;;kBAIUtD,G","file":"Log.js","sourcesContent":["const fs = require('fs');\n\nclass Log {\n\n    constructor(options){\n        this.options = {\n            filename: \"log.log\",\n            filesize: 1000000,\n            logfolder: \"log\",\n            numfiles: 3,\n            debug: true,\n            timestamp: true\n        };\n        for (let attrname in options) {\n            if(this.options.hasOwnProperty(attrname)){\n                this.options[attrname] = options[attrname];\n            }\n        }\n        this.fullpath = this.options.logfolder + \"/\" + this.options.filename;\n        this.existingFiles = [];\n        const dir = this.options.logfolder;\n        const files = fs.readdirSync(dir);\n        const filename = this.options.filename;\n\n        files.forEach((file) => {\n            if(file.indexOf(filename) > -1){\n                this.existingFiles.push(file);\n            }\n        });\n        const dt = this.getDateTime();\n        fs.appendFile(this.fullpath, `[INFO][${dt}] log file opened \\n`, () =>{\n            this.watcher = fs.watch(this.fullpath, (eventType, filename) =>{\n                this.rotate(eventType, filename);\n            });\n        });\n    }\n\n    getDateTime(){\n        let [date, crap] = (new Date() + \"\").split(\"GMT\");\n        return date.trim();\n    }\n\n    close(){\n        this.watcher.close();\n    }\n\n    rotate(eventType, filename) {\n        if(eventType == \"change\"){\n            const filesize = this.options.filesize;\n            const numFiles = this.existingFiles.length - 1;\n            fs.stat(this.fullpath, (err, stats) => {\n                if(stats.size >= filesize){\n                    console.log(\"should rotate\");\n                    for(let x = 0; x < this.existingFiles.length; x++){\n                        let existingFile = this.existingFiles[x];\n                        if(existingFile != this.options.filename){\n                            let newName = this.fullpath + \".\" + (x + 1);\n                            fs.rename(this.options.logfolder + \"/\" + existingFile, newName, function(){});\n                        }\n                    }\n                    fs.writeFileSync(this.fullpath + \".0\", fs.readFileSync(this.fullpath));\n                    this.existingFiles.push(this.fullpath + \".\" + numFiles);\n                    let rand = Math.random();\n                    fs.writeFileSync(this.fullpath, \"file rotated: [\" + rand + \"]\");\n                    if(numFiles >= this.options.numfiles){\n                        fs.unlink(this.fullpath + \".\" + (this.existingFiles.length - 1), () => {\n                            this.existingFiles.pop();\n                        });\n                    }\n                }\n            });\n        }\n    }\n\n    log(message, level = \"INFO\", json = true){\n        let st;\n        if(json) {\n            st = this.makeMessage(message);\n        }else{\n            st = message;\n        }\n        let fst = `[${level}]`;\n        if(this.options.timestamp){\n            let dt = this.getDateTime();\n            fst += `[${dt}]`;\n        }\n        fst += \" \";\n\n        fst += st;\n        fs.appendFile(this.fullpath, fst + \"\\n\", function(){});\n    }\n\n    error(message){\n        const st = this.makeMessage(message);\n        this.log(st, \"ERROR\", false);\n    }\n\n    debug(message){\n        if(!this.options.debug) return;\n        const st = this.makeMessage(message);\n        this.log(st, \"DEBUG\", false);\n    }\n\n    makeMessage(message){\n        if(typeof(message) === \"string\"){\n            return message;\n        }\n        let st;\n        try{\n            st = JSON.stringify(message);\n        }catch(e){\n            st = message;\n        }\n        return st;\n    }\n}\n\n\nexport default Log;"]}