{"version":3,"sources":["../../src/server/Knn.es6"],"names":["Knn","db","fp_id","features","points","k","cb","cache","featureKeys","Object","keys","featureKeysLength","length","coords","coordsLength","knn","i","coord","undefined","split","x","y","x_y","Number","distance","j","feature","testValue","getFeatureValue","Math","pow","abs","map","key","obj","sqrt","sort","a","b","splice"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEMA,G;AAEF,iBAAYC,EAAZ,EAAoBC,KAApB,EAAkC;AAAA;;AAC9B,aAAKD,EAAL,GAAUA,EAAV;AACA,aAAKC,KAAL,GAAaA,KAAb;AACH;;;;qCAEYC,Q,EAAUC,M,EAAQC,C,EAAGC,E,EAAG;AACjC,iBAAKH,QAAL,GAAgBA,QAAhB;AACA,gBAAMI,QAAQH,MAAd;;AAEA,gBAAMI,cAAcC,OAAOC,IAAP,CAAY,KAAKP,QAAjB,CAApB;AACA,gBAAMQ,oBAAoBH,YAAYI,MAAtC;AACA,gBAAMC,SAASJ,OAAOC,IAAP,CAAYH,KAAZ,CAAf;AACA,gBAAMO,eAAeD,OAAOD,MAA5B;;AAEA,gBAAIG,MAAM,EAAV;;AAEA,iBAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIF,YAAnB,EAAiCE,GAAjC,EAAqC;AACjC,oBAAIC,QAAQJ,OAAOG,CAAP,CAAZ;AACA,oBAAGD,IAAIE,KAAJ,MAAeC,SAAlB,EAA4B;AAAA,uCACXD,MAAME,KAAN,CAAY,GAAZ,CADW;AAAA;AAAA,wBACnBC,CADmB;AAAA,wBAChBC,CADgB;;AAExBN,wBAAIE,KAAJ,IAAa;AACTK,6BAAKL,KADI;AAETG,2BAAGG,OAAOH,CAAP,CAFM;AAGTC,2BAAGE,OAAOF,CAAP,CAHM;AAITG,kCAAU;AAJD,qBAAb;AAMH;AACD,qBAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAId,iBAAnB,EAAsCc,GAAtC,EAA0C;AACtC,wBAAIC,UAAUlB,YAAYiB,CAAZ,CAAd;AACA,wBAAIE,YAAY,KAAK1B,EAAL,CAAQ2B,eAAR,CAAwB,KAAK1B,KAA7B,EAAoCe,KAApC,EAA2CS,OAA3C,CAAhB;AACA,wBAAGC,SAAH,EAAa;AACTZ,4BAAIE,KAAJ,EAAWO,QAAX,IAAuBK,KAAKC,GAAL,CAASD,KAAKE,GAAL,CAASJ,YAAY,KAAKxB,QAAL,CAAcuB,OAAd,CAArB,CAAT,EAAuD,CAAvD,CAAvB;AACH;AACJ;AACJ;;AAEDX,kBAAMN,OACDC,IADC,CACIK,GADJ,EAEDiB,GAFC,CAEG,UAACC,GAAD,EAAS;AACV,oBAAIC,MAAMnB,IAAIkB,GAAJ,CAAV;AACAC,oBAAIV,QAAJ,GAAeK,KAAKM,IAAL,CAAUD,IAAIV,QAAd,CAAf;AACA,uBAAOT,IAAIkB,GAAJ,CAAP;AACH,aANC,CAAN;AAOAlB,kBAAMA,IAAIqB,IAAJ,CAAS,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACrB,oBAAGD,EAAEb,QAAF,GAAac,EAAEd,QAAlB,EAA2B;AACvB,2BAAO,CAAP;AACH,iBAFD,MAEM,IAAGc,EAAEd,QAAF,GAAaa,EAAEb,QAAlB,EAA2B;AAC7B,2BAAO,CAAC,CAAR;AACH;AACD,uBAAO,CAAP;AACH,aAPK,CAAN;AAQAT,kBAAMA,IAAIwB,MAAJ,CAAW,CAAX,EAAclC,CAAd,CAAN;AACAC,eAAGS,GAAH;AACH;;;;;;kBAGUf,G","file":"Knn.js","sourcesContent":["import Db from './Db';\nimport Log from './Log';\nimport Features from './Features';\n\nclass Knn  {\n\n    constructor(db: Db, fp_id: string){\n        this.db = db;\n        this.fp_id = fp_id;\n    }\n\n    getNeighbors(features, points, k, cb){\n        this.features = features;\n        const cache = points;\n\n        const featureKeys = Object.keys(this.features);\n        const featureKeysLength = featureKeys.length;\n        const coords = Object.keys(cache);\n        const coordsLength = coords.length;\n\n        let knn = {};\n\n        for(let i = 0; i < coordsLength; i++){\n            let coord = coords[i];\n            if(knn[coord] === undefined){\n                let [x, y] = coord.split(\"_\");\n                knn[coord] = {\n                    x_y: coord,\n                    x: Number(x),\n                    y: Number(y),\n                    distance: 0\n                };\n            }\n            for(let j = 0; j < featureKeysLength; j++){\n                let feature = featureKeys[j];\n                let testValue = this.db.getFeatureValue(this.fp_id, coord, feature);\n                if(testValue){\n                    knn[coord].distance += Math.pow(Math.abs(testValue - this.features[feature]), 2);\n                }\n            }\n        }\n\n        knn = Object\n            .keys(knn)\n            .map((key) => {\n                let obj = knn[key];\n                obj.distance = Math.sqrt(obj.distance);\n                return knn[key];\n            });\n        knn = knn.sort((a, b) => {\n            if(a.distance > b.distance){\n                return 1;\n            }else if(b.distance > a.distance){\n                return -1;\n            }\n            return 0;\n        });\n        knn = knn.splice(0, k);\n        cb(knn);\n    }\n}\n\nexport default Knn;"]}