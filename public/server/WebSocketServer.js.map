{"version":3,"sources":["../../src/server/WebSocketServer.es6"],"names":["WsServer","require","server","http","WebSocketServer","log","restServer","connections","message","forEach","conn","sendUTF","JSON","stringify","httpServer","autoAcceptConnections","on","request","onRequest","e","error","connection","accept","origin","cid","length","push","onConnectionMessage","reasonCode","description","debug","Date","remoteAddress","removeDisconnected","dis","Infinity","i","closeEventEmitted","splice","type","console","utf8Data","binaryData","sendBytes"],"mappings":";;;;;;;;AAAA;;;;;;;;AACA,IAAMA,WAAWC,QAAQ,WAAR,EAAqBC,MAAtC;AACA,IAAMC,OAAOF,QAAQ,MAAR,CAAb;;IAGMG,e;AAEF,6BAAYC,GAAZ,EAAsBC,UAAtB,EAA6C;AAAA;;AACzC,aAAKD,GAAL,GAAWA,GAAX;AACA,aAAKE,WAAL,GAAmB,EAAnB;AACA,aAAKD,UAAL,GAAkBA,UAAlB;AACH;;;;6BAEIE,O,EAAQ;AACT,iBAAKD,WAAL,CAAiBE,OAAjB,CAAyB,UAACC,IAAD,EAAU;AAC/BA,qBAAKC,OAAL,CAAaC,KAAKC,SAAL,CAAeL,OAAf,CAAb;AACH,aAFD;AAGH;;;sCAEY;AAAA;;AACT,iBAAKN,MAAL,GAAc,IAAIF,QAAJ,CAAa;AACvBc,4BAAY,KAAKR,UADM;AAEvBS,uCAAuB;AAFA,aAAb,CAAd;;AAKA,iBAAKb,MAAL,CAAYc,EAAZ,CAAe,SAAf,EAA0B,UAACC,OAAD,EAAa;AACnC,oBAAI;AACA,0BAAKC,SAAL,CAAeD,OAAf;AACH,iBAFD,CAEC,OAAME,CAAN,EAAQ;AACL,0BAAKd,GAAL,CAASe,KAAT,CAAeD,EAAEX,OAAjB;AACH;AACJ,aAND;AAOH;;;kCAESS,O,EAAS;AAAA;;AACf,gBAAII,aAAaJ,QAAQK,MAAR,CAAe,eAAf,EAAgCL,QAAQM,MAAxC,CAAjB;AACAF,uBAAWG,GAAX,GAAiB,KAAKjB,WAAL,CAAiBkB,MAAlC;AACA,iBAAKlB,WAAL,CAAiBmB,IAAjB,CAAsBL,UAAtB;AACA,iBAAKhB,GAAL,CAASA,GAAT,CAAa,qBAAb;;AAEAgB,uBAAWL,EAAX,CAAc,SAAd,EAAyB,UAACR,OAAD,EAAa;AAClC,uBAAKmB,mBAAL,CAAyBN,UAAzB,EAAqCb,OAArC;AACH,aAFD;;AAIAa,uBAAWL,EAAX,CAAc,OAAd,EAAuB,UAACY,UAAD,EAAaC,WAAb,EAA6B;AAChD,uBAAKxB,GAAL,CAASyB,KAAT,CAAgB,IAAIC,IAAJ,EAAD,GAAe,QAAf,GAA0BV,WAAWW,aAArC,GAAqD,gBAApE;AACA,uBAAKC,kBAAL;AACH,aAHD;;AAKAZ,uBAAWV,OAAX,CAAmBC,KAAKC,SAAL,CAAe,EAAC,UAAU,IAAX,EAAf,CAAnB;AACH;;;6CAEoB;AACjB,gBAAIqB,MAAMC,QAAV;AACA,iBAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,KAAK7B,WAAL,CAAiBkB,MAApC,EAA4CW,GAA5C,EAAgD;AAC5C,oBAAG,KAAK7B,WAAL,CAAiB8B,iBAApB,EAAsC;AAClCH,0BAAME,CAAN;AACH;AACJ;AACD,gBAAGF,MAAMC,QAAT,EAAmB;AACf,qBAAK5B,WAAL,GAAmB,KAAKA,WAAL,CAAiB+B,MAAjB,CAAwBJ,GAAxB,EAA6B,CAA7B,CAAnB;AACH;AACJ;;;4CAEmBb,U,EAAYb,O,EAAS;AACrC,gBAAIA,QAAQ+B,IAAR,KAAiB,MAArB,EAA6B;AACzBC,wBAAQnC,GAAR,CAAY,uBAAuBG,QAAQiC,QAA3C;AACApB,2BAAWV,OAAX,CAAmBH,QAAQiC,QAA3B;AACH,aAHD,MAIK,IAAIjC,QAAQ+B,IAAR,KAAiB,QAArB,EAA+B;AAChCC,wBAAQnC,GAAR,CAAY,gCAAgCG,QAAQkC,UAAR,CAAmBjB,MAAnD,GAA4D,QAAxE;AACAJ,2BAAWsB,SAAX,CAAqBnC,QAAQkC,UAA7B;AACH;AACJ;;;;;;kBAGUtC,e","file":"WebSocketServer.js","sourcesContent":["import RestServer from './RestServer';\nconst WsServer = require('websocket').server;\nconst http = require('http');\n\n\nclass WebSocketServer {\n\n    constructor(log: Log, restServer: RestServer){\n        this.log = log;\n        this.connections = [];\n        this.restServer = restServer;\n    }\n\n    send(message){\n        this.connections.forEach((conn) => {\n            conn.sendUTF(JSON.stringify(message));\n        });\n    }\n\n    startServer(){\n        this.server = new WsServer({\n            httpServer: this.restServer,\n            autoAcceptConnections: false\n        });\n\n        this.server.on('request', (request) => {\n            try {\n                this.onRequest(request);\n            }catch(e){\n                this.log.error(e.message);\n            }\n        });\n    }\n\n    onRequest(request) {\n        let connection = request.accept('echo-protocol', request.origin);\n        connection.cid = this.connections.length;\n        this.connections.push(connection);\n        this.log.log(\"Connection Accepted\");\n\n        connection.on('message', (message) => {\n            this.onConnectionMessage(connection, message);\n        });\n\n        connection.on('close', (reasonCode, description) => {\n            this.log.debug((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');\n            this.removeDisconnected();\n        });\n\n        connection.sendUTF(JSON.stringify({'action': 'HI'}));\n    }\n\n    removeDisconnected() {\n        let dis = Infinity;\n        for(let i = 0; i < this.connections.length; i++){\n            if(this.connections.closeEventEmitted){\n                dis = i;\n            }\n        }\n        if(dis < Infinity) {\n            this.connections = this.connections.splice(dis, 1);\n        }\n    }\n\n    onConnectionMessage(connection, message) {\n        if (message.type === 'utf8') {\n            console.log('Received Message: ' + message.utf8Data);\n            connection.sendUTF(message.utf8Data);\n        }\n        else if (message.type === 'binary') {\n            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');\n            connection.sendBytes(message.binaryData);\n        }\n    }\n}\n\nexport default WebSocketServer;"]}