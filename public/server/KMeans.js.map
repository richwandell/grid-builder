{"version":3,"sources":["../../src/server/KMeans.es6"],"names":["KMeans","c","centroids","findCentroids","newCE","findClusters","reduce","a","b","concat","new_error","clusters","same","i","length","old_error","kmeans","k","knn","push","x","y","distance","Math","floor","map","Infinity","cc","forEach","sort","round","clusterIndex","largestLength","largestCluster","clu","j","center","dataset","dp","closest","closest_distance","dist","Number","pow","root","sqrt"],"mappings":"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","file":"KMeans.js","sourcesContent":["class KMeans {\n\n    kmeans(c){\n        let centroids = this.findCentroids(c);\n        let newCE = this.findClusters(\n            centroids,\n            c.reduce((a, b) => { return a.concat(b); })\n        );\n\n        let new_error = newCE[0];\n        let clusters = newCE[1];\n\n        let same = true;\n        for(let i = 0; i < new_error.length; i++){\n            if(new_error[i] !== this.old_error[i]){\n                same = false;\n                this.old_error = new_error;\n                break;\n            }\n        }\n        if(same){\n            return [clusters, centroids];\n        }else{\n            return this.kmeans(clusters);\n        }\n    }\n\n    constructor(k, knn){\n        let clusters = [];\n\n        let c = [];\n        for(let i = 0; i < knn.length; i++){\n            c.push([knn[i].x, knn[i].y, knn[i].distance]);\n            if(i > 0 && i % Math.floor(knn.length / k) === 0){\n                clusters.push(c);\n                c = [];\n            }\n        }\n        if(c.length > 0) clusters.push(c);\n\n        this.old_error = clusters.map(() => {return Infinity;});\n\n        let cc = this.kmeans(clusters);\n        cc[0]\n            .forEach((c) => {\n                c.sort((a, b) => {\n                    return a[2] > b[2];\n                });\n            });\n\n        cc[1] = cc[1].map((c) => {\n            return [Math.round(c[0]), Math.round(c[1])];\n        });\n        this.clusters = cc[0];\n        this.centroids = cc[1];\n    }\n\n    getClusters(){\n        return this.clusters;\n    }\n\n    getCentroids(){\n        return this.centroids;\n    }\n\n    getCentroid(clusterIndex: number){\n        return this.centroids[clusterIndex];\n    }\n\n    getLargestClusterIndex(){\n        let largestLength = 0;\n        let largestCluster = 0;\n        this.clusters.forEach((clu, i) => {\n            if(clu.length > largestLength){\n                largestLength = clu.length;\n                largestCluster = i;\n            }\n        });\n        return largestCluster;\n    }\n\n\n    findCentroids(clusters){\n\n        let centroids = [];\n\n        for(let i = 0; i < clusters.length; i++){\n            let clu = clusters[i];\n            let x = 0;\n            let y = 0;\n            for(let j = 0; j < clu.length; j++){\n                x += clu[j][0];\n                y += clu[j][1];\n            }\n            let center = [x / clu.length, y / clu.length];\n            centroids.push(center);\n        }\n        return centroids;\n    }\n\n    findClusters(centroids, dataset){\n\n        let clusters = centroids.map((c) => { return []; });\n        let new_error = centroids.map(() => {return 0;});\n        for(let i = 0; i < dataset.length; i++){\n            let dp = dataset[i];\n            let closest = false;\n            let closest_distance = Infinity;\n            for(let j = 0; j < centroids.length; j++){\n                let center = centroids[j];\n                let distance = this.dist(center, dp);\n                if(distance < closest_distance){\n                    closest = j;\n                    closest_distance = distance;\n                }\n            }\n            new_error[closest] = Number(new_error[closest]) + Math.pow(closest_distance, 2);\n\n            clusters[closest].push(dp);\n        }\n        return [new_error, clusters];\n    }\n\n    dist(a, b){\n        let root = 0;\n        for(let i = 0; i < 2; i++){\n            root += Math.pow((a[i] - b[i]), 2);\n        }\n        return Math.sqrt(root);\n    }\n}\n\nexport default KMeans;"]}