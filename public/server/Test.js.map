{"version":3,"sources":["Test.es6"],"names":["fs","require","Test","database","debug","db","getDatabase","rows","readFileSync","split","features","fp_id","forEach","row","row1","Math","abs","Number","start","Date","getTime","data","keys","Object","done","key","all","query_get_features","replace","err","push","length","close","makeGuess","distances","knn","feature","coord","x","y","pow","diff","x_y","distance","sqrt","reduce","a","b","sort","console","log","end"],"mappings":"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","file":"Test.js","sourcesContent":["import Db from './Db';\nconst fs = require('fs');\n\nclass Test {\n    constructor(){\n        let database = new Db({\n            debug: () => {}\n        });\n\n        let db = database.getDatabase();\n\n        let rows = fs.readFileSync(\"./1-28.csv\", \"utf8\").split(\"\\n\");\n\n        let features = {};\n\n        let fp_id = 0;\n\n        rows.forEach((row) => {\n            row = row.split(\",\");\n            if(typeof(row[1]) == \"undefined\") return;\n\n            rows.forEach((row1) => {\n                row1 = row1.split(\",\");\n                if(typeof(row1[1]) == \"undefined\") return;\n                fp_id = row[0];\n                features[row[1] + row1[1]] = Math.abs(Number(row[4]) - Number(row1[4]));\n            });\n        });\n        this.start = new Date().getTime();\n        let data = [];\n        let keys = Object.keys(features);\n        let done = 0;\n\n        keys.forEach((key) => {\n            db.all(Db.query_get_features.replace(\":feature_value:\", features[key]), [key, fp_id], (err, rows) => {\n                data.push(rows);\n                done++;\n                if(done >= keys.length){\n                    db.close();\n                    this.makeGuess(data);\n                }\n            });\n        });\n    }\n\n    makeGuess(data){\n\n        let distances = {};\n        let knn = [];\n\n        data.forEach((feature) => {\n            if(feature.length == 0) return;\n\n            feature.forEach((coord) => {\n                if(typeof(distances[coord.x + \"_\" + coord.y]) == \"undefined\"){\n                    distances[coord.x + \"_\" + coord.y] = [];\n                }\n\n                distances[coord.x + \"_\" + coord.y].push(Math.pow(coord.diff, 2));\n            });\n        });\n        let keys = Object.keys(distances);\n        keys.forEach((key) => {\n            knn.push({\n                x_y: key,\n                distance: Math.sqrt(distances[key].reduce((a, b) => { return a+b; }))\n            });\n        });\n        knn.sort((a, b) => { return a.distance > b.distance; });\n\n        console.log(knn);\n        this.end = new Date().getTime();\n        console.log(this.end - this.start);\n    }\n\n}\n\nnew Test();"]}