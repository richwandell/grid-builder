{"version":3,"sources":["../../src/server/RestServer.es6"],"names":["express","require","bodyParser","Utils","http","fs","RestServer","server","worker","id","log","db","app","use","json","limit","urlencoded","extended","static","req","res","data","body","cleanData","error","setResponseHeaders","layout_images","length","updateDatabase","err","rows","send","success","readFile","file","header","status","replace","getServerIp","getFloorPlans","forEach","row","layout_image","JSON","parse","params","getScannedCoords","fp_id","payload","message","saveReadings","notifyListeners","action","getLayoutInfo","device_id","stateParticles","particles","undefined","pf","setParticles","f","features","makeFeatures","ap_ids","move","allParticles","getParticles","getParticleCoords","knn","getNeighbors","getParticleKeys","km","largestCluster","getLargestClusterIndex","guess","getCentroid","type","all_particles","next","post","jsonHeaders","localize","get","getDeviceDescription","sendFile","process","cwd","getFloorplans","createServer","port","listen"],"mappings":"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","file":"RestServer.js","sourcesContent":["import Knn from './Knn';\nimport KMeans from './KMeans';\nimport ParticleFilter from './ParticleFilter';\nimport Features from './Features';\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst Utils = require('./Utils.js');\nconst http = require('http');\nconst fs = require(\"fs\");\n\n\n/**\n * RestServer class is used to power the rest server that will communicate with the\n * mobile phone on the local wifi network. This server will respond to upnp devices\n * with the device description xml file as well as handle all saving and fetching of data.\n *\n * The rest server uses express.js and listens on a port configured by builder_rest_port\n * parameter in the package.json file within the public folder\n *\n * @author Rich Wandell <richwandell@gmail.com>\n */\nclass RestServer{\n\n    constructor(server: Server){\n        this.worker = server;\n        this.id = server.id;\n        this.log = server.log;\n        this.db = server.db;\n\n        this.app = express();\n        this.app.use(bodyParser.json({limit: '50mb'}));\n        this.app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\n        this.app.use('/builder', express.static('builder'))\n    }\n\n    /**\n     * Save handler for saving layout images from the UI\n     * @param req\n     * @param res\n     */\n    updateDatabase(req, res){\n        let log = this.log;\n        let db = this.db;\n        const data = req.body;\n        let cleanData = {};\n        let error = false;\n\n        log.log(\"/rest/updateDatabase\");\n        this.setResponseHeaders(res);\n\n        if(typeof(data.layout_images) != \"undefined\"){\n            if(data.layout_images.length > 0){\n                cleanData.layout_images = data.layout_images;\n            }else{\n                error = true;\n            }\n        }else{\n            error = true;\n        }\n\n        if(!error){\n            db.updateDatabase(cleanData, function(err, rows){\n                res.send({success: true});\n            });\n        }else{\n            res.send({success: false});\n        }\n\n        log.log(req.body);\n    }\n\n    /**\n     * Returns the device description xml file for upnp readers\n     * @param req\n     * @param res\n     */\n    getDeviceDescription(req, res){\n        let log = this.log;\n        let id = this.id;\n        fs.readFile('devicedescription.xml', \"binary\", function (err, file) {\n            if (err) {\n                res.header(\"Content-Type\", \"text/plain\");\n                res.status(500).send(err);\n                return;\n            }\n            file = file.replace(/\\{\\{UDN\\}\\}/, \"uuid:\" + id);\n            file = file.replace(/\\{\\{END\\}\\}/, \"http://\" + Utils.getServerIp() + \":8888/rest/\");\n            res.header(\"Access-Control-Allow-Origin\", \"*\");\n            res.header(\"Content-Type\", \"text/xml\");\n            res.send(file);\n        });\n    }\n\n    /**\n     * Returns all of the layout image records as a json array\n     * @param req\n     * @param res\n     */\n    getFloorplans(req, res){\n        let log = this.log;\n        let db = this.db;\n        log.log(\"/rest/floorplans\");\n        db.getFloorPlans(function(err, rows){\n            rows.forEach(function(row){\n                if(typeof(row.layout_image) != \"undefined\"){\n                    row.layout_image = JSON.parse(row.layout_image);\n                }\n            });\n            res.send(rows);\n        });\n    }\n\n    getScannedCoords(req, res){\n        let log = this.log;\n        let db = this.db;\n        const data = req.params;\n        log.log(\"/rest/getScannedCoords\");\n        db.getScannedCoords(data.fp_id, function(err, rows){\n            res.send(rows);\n        });\n    }\n\n    saveReadings(req, res){\n        let log = this.log;\n        log.log(\"/rest/saveReadings\");\n        const data = req.body;\n        log.log(data);\n        if(typeof(data.payload) == \"undefined\"){\n            return res.send({success: false, message: \"missing payload\"});\n        }\n        this.db.saveReadings(data.payload, () => {\n            res.send({success: true});\n            this.notifyListeners({\n                action: 'NEW_READING'\n            });\n        });\n\n    }\n\n    getLayoutInfo(req, res){\n        let log = this.log;\n        log.log(\"/rest/layout_info/all\");\n        this.setResponseHeaders(res);\n\n        this.db.getLayoutInfo(function(err, rows){\n            res.send({\n                success: true,\n                payload: rows\n            });\n        });\n    }\n\n    setResponseHeaders(res){\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\n        res.header('Content-Type', 'application/javascript');\n        res.header(\"Cache-Control\", \"no-cache\");\n    }\n\n    localize(req, res) {\n        const data = req.body;\n        const id = data.device_id;\n\n        let stateParticles = [];\n        if(this.worker.particles[id] !== undefined){\n            stateParticles = this.worker.particles[id];\n        }\n        let pf = new ParticleFilter(this.db, data.fp_id);\n        pf.setParticles(stateParticles);\n\n        const f = new Features();\n        const features = f.makeFeatures(data.ap_ids);\n        pf.move(features);\n        const allParticles = pf.getParticles();\n        this.worker.particles[id] = allParticles;\n\n        const particles = pf.getParticleCoords();\n\n        let knn = new Knn(this.db, data.fp_id);\n\n        knn.getNeighbors(features, pf.getParticleKeys(), 5, (knn) => {\n            let km = new KMeans(2, knn);\n            const largestCluster = km.getLargestClusterIndex();\n            const guess = km.getCentroid(largestCluster);\n\n            res.send({\n                success: true,\n                guess: guess,\n                particles: particles\n            });\n            this.notifyListeners({\n                action: 'LOCALIZE',\n                id: id,\n                guess: guess,\n                type: data.type,\n                particles: particles,\n                fp_id: data.fp_id,\n                all_particles: allParticles\n            });\n        });\n    }\n\n    notifyListeners(data: Object) {\n        this.worker.send(data);\n    }\n\n    jsonHeaders(req, res, next){\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\n        res.header('Content-Type', 'application/javascript');\n        res.header(\"Cache-Control\", \"no-cache\");\n        next();\n    }\n\n    /**\n     * Routes are defined here and mapped to actions\n     */\n    createServer() {\n        const app = this.app;\n\n        app.post('/rest/localize', this.jsonHeaders, (req, res) => {\n            this.localize(req, res);\n        });\n\n        app.get('/rest/alive', this.jsonHeaders, (req, res) => {\n            res.send({success: true});\n        });\n\n        app.post('/rest/updateDatabase', (req, res) => {\n            this.updateDatabase(req, res);\n        });\n\n        app.get('/devicedescription.xml', (req, res) => {\n            this.getDeviceDescription(req, res);\n        });\n\n        app.get(\"/icon24.png\", (req, res) => {\n            this.log.log(\"icon24.png\");\n            res.header(\"Access-Control-Allow-Origin\", \"*\");\n            res.sendFile(process.cwd() + '/src/icon24.png');\n        });\n\n        app.get(\"/rest/floorplans\", this.jsonHeaders, (req, res) => {\n            this.getFloorplans(req, res);\n        });\n\n        app.post(\"/rest/saveReadings\", this.jsonHeaders, (req, res) => {\n            this.saveReadings(req, res);\n        });\n\n        app.get(\"/rest/getScannedCoords/:fp_id\", this.jsonHeaders, (req, res) => {\n            this.getScannedCoords(req, res);\n        });\n\n        this.server = http.createServer(app);\n\n    }\n\n    listen(port){\n        this.server.listen(port);\n    }\n\n    getApp(): express {\n        return this.app;\n    }\n\n    getServer(): Server {\n        return this.server\n    }\n\n    getLog(): Log {\n        return this.log;\n    }\n}\n\n\nexport default RestServer;"]}