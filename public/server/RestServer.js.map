{"version":3,"sources":["RestServer.es6"],"names":["express","require","bodyParser","pjson","Logger","Db","fs","Utils","uuid","RestServer","id","v4","oldUUID","readFileSync","e","writeFileSync","log","logfolder","builder_log_folder","filename","filesize","numfiles","db","app","use","json","limit","urlencoded","extended","static","req","res","data","body","cleanData","error","setResponseHeaders","layout_images","length","updateDatabase","err","rows","send","success","readFile","file","header","status","replace","getServerIp","getFloorPlans","forEach","row","layout_image","JSON","parse","payload","message","saveReadings","getLayoutInfo","createTables","get","getDatabaseVersion","post","getDeviceDescription","sendFile","process","cwd","getFloorplans","listen","builder_rest_port","module","exports"],"mappings":"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","file":"RestServer.js","sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst pjson = require('../package.json');\nconst Logger = require('./Log.js');\nlet Db = require('./Db.js');\nconst fs = require('fs');\nconst Utils = require('./Utils.js');\nconst uuid = require('uuid');\n\n/**\n * RestServer class is used to power the rest server that will communicate with the\n * mobile phone on the local wifi network. This server will respond to upnp devices\n * with the device description xml file as well as handle all saving and fetching of data.\n *\n * The rest server uses express.js and listens on a port configured by builder_rest_port\n * parameter in the package.json file within the public folder\n *\n * @author Rich Wandell <richwandell@gmail.com>\n */\nclass RestServer{\n\n\n\n    constructor(){\n        this.id = uuid.v4();\n        try {\n            let oldUUID = fs.readFileSync(\".uuid\", \"utf8\");\n            this.id = oldUUID;\n        }catch(e){\n            fs.writeFileSync(\".uuid\", this.id);\n        }\n\n        this.log = new Logger({\n            logfolder: pjson.builder_log_folder,\n            filename: \"rest.log\",\n            filesize: 5000000,\n            numfiles: 3\n        });\n        this.db = new Db(this.log);\n        this.app = express();\n        this.app.use(bodyParser.json({limit: '50mb'}));\n        this.app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\n        this.app.use('/builder', express.static('builder'))\n    }\n\n    /**\n     * Save handler for saving layout images from the UI\n     * @param req\n     * @param res\n     */\n    updateDatabase(req, res){\n        let log = this.log;\n        let db = this.db;\n        const data = req.body;\n        let cleanData = {};\n        let error = false;\n\n        log.log(\"/rest/updateDatabase\");\n        this.setResponseHeaders(res);\n\n        if(typeof(data.layout_images) != \"undefined\"){\n            if(data.layout_images.length > 0){\n                cleanData.layout_images = data.layout_images;\n            }else{\n                error = true;\n            }\n        }else{\n            error = true;\n        }\n\n        if(!error){\n            db.updateDatabase(cleanData, function(err, rows){\n                res.send({success: true});\n            });\n        }else{\n            res.send({success: false});\n        }\n\n        log.log(req.body);\n    }\n\n    /**\n     * Returns the device description xml file for upnp readers\n     * @param req\n     * @param res\n     */\n    getDeviceDescription(req, res){\n        let log = this.log;\n        let id = this.id;\n        log.log(\"devicedescription.xml\");\n        fs.readFile('devicedescription.xml', \"binary\", function (err, file) {\n            if (err) {\n                res.header(\"Content-Type\", \"text/plain\");\n                res.status(500).send(err);\n                return;\n            }\n            file = file.replace(/\\{\\{UDN\\}\\}/, \"uuid:\" + id);\n            file = file.replace(/\\{\\{END\\}\\}/, \"http://\" + Utils.getServerIp() + \":8888/rest/\");\n            res.header(\"Access-Control-Allow-Origin\", \"*\");\n            res.header(\"Content-Type\", \"text/xml\");\n            res.send(file);\n        });\n    }\n\n    /**\n     * Returns all of the layout image records as a json array\n     * @param req\n     * @param res\n     */\n    getFloorplans(req, res){\n        let log = this.log;\n        let db = this.db;\n        log.log(\"/rest/floorplans\");\n        this.setResponseHeaders(res);\n        db.getFloorPlans(function(err, rows){\n            rows.forEach(function(row){\n                if(typeof(row.layout_image) != \"undefined\"){\n                    row.layout_image = JSON.parse(row.layout_image);\n                }\n            });\n            res.send(rows);\n        });\n    }\n\n    saveReadings(req, res){\n        let log = this.log;\n        log.log(\"/rest/saveReadings\");\n        this.setResponseHeaders(res);\n        const data = req.body;\n        log.log(data);\n        if(typeof(data.payload) == \"undefined\"){\n            return res.send({success: false, message: \"missing payload\"});\n        }\n        this.db.saveReadings(data.payload);\n        res.send({success: true});\n    }\n\n    getLayoutInfo(req, res){\n        let log = this.log;\n        log.log(\"/rest/layout_info/all\");\n        this.setResponseHeaders(res);\n\n        this.db.getLayoutInfo(function(err, rows){\n            res.send({\n                success: true,\n                payload: rows\n            });\n        });\n    }\n\n    setResponseHeaders(res){\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\n        res.header('Content-Type', 'application/javascript');\n        res.header(\"Cache-Control\", \"no-cache\");\n    }\n\n    /**\n     * Routes are defined here and mapped to actions\n     */\n    startServer() {\n        const db = this.db;\n        const log = this.log;\n        const app = this.app;\n        db.createTables(log);\n\n        app.get('/rest/alive', (req, res) => {\n            this.setResponseHeaders(res);\n            res.send({success: true});\n        });\n\n        app.get('/rest/databaseVersion', (req, res) => {\n            this.getDatabaseVersion(req, res);\n        });\n\n        app.post('/rest/updateDatabase', (req, res) => {\n            this.updateDatabase(req, res);\n        });\n\n        app.get('/devicedescription.xml', (req, res) => {\n            this.getDeviceDescription(req, res);\n        });\n\n        app.get(\"/icon24.png\", (req, res) => {\n            this.log.log(\"icon24.png\");\n            res.header(\"Access-Control-Allow-Origin\", \"*\");\n            res.sendFile(process.cwd() + '/src/icon24.png');\n        });\n\n        app.get(\"/rest/floorplans\", (req, res) => {\n            this.getFloorplans(req, res);\n        });\n\n        app.post(\"/rest/saveReadings\", (req, res) => {\n            this.saveReadings(req, res);\n        });\n\n        app.listen(pjson.builder_rest_port, function () {\n            log.log('Server Started')\n        });\n    }\n\n}\n\n\n\nmodule.exports = RestServer;"]}