{"version":3,"sources":["../../src/server/Localizer.es6"],"names":["pjson","require","scanner","uuid","http","fs","request","Localizer","id","v4","oldUUID","readFileSync","e","writeFileSync","rows","data","action","fp_id","ap_ids","device_id","type","url","json","method","body","error","res","start","scan","err","networks","console","map","net","ap_id","mac","value","rssi","send","l"],"mappings":";;;;;;AAAA,IAAMA,QAAQC,QAAQ,oBAAR,CAAd;AACA,IAAMC,UAAUD,QAAQ,mBAAR,CAAhB;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMI,KAAKJ,QAAQ,IAAR,CAAX;AACA,IAAMK,UAAUL,QAAQ,SAAR,CAAhB;;IAEMM,S;AAEF,yBAAa;AAAA;;AACT,aAAKC,EAAL,GAAUL,KAAKM,EAAL,EAAV;AACA,YAAI;AACA,gBAAIC,UAAUL,GAAGM,YAAH,CAAgB,OAAhB,EAAyB,MAAzB,CAAd;AACA,iBAAKH,EAAL,GAAUE,OAAV;AACH,SAHD,CAGC,OAAME,CAAN,EAAQ;AACLP,eAAGQ,aAAH,CAAiB,OAAjB,EAA0B,KAAKL,EAA/B;AACH;AACJ;;;;6BAEIM,I,EAAK;AAAA;;AACN,gBAAMC,OAAO;AACTC,wBAAQ,QADC;AAETC,uBAAO,kCAFE;AAGTC,wBAAQJ,IAHC;AAITK,2BAAW,KAAKX,EAJP;AAKTY,sBAAM;AALG,aAAb;;AASAd,oBAAQ;AACJe,qBAAK,qCADD;AAEJC,sBAAM,IAFF;AAGJC,wBAAQ,MAHJ;AAIJC,sBAAMT;AAJF,aAAR,EAKG,UAACU,KAAD,EAAQC,GAAR,EAAaF,IAAb,EAAsB;AACrB,sBAAKG,KAAL,CAAWb,IAAX;AACA;AACA;AACA;AACH,aAVD;AAWH;;;gCAEM;AAAA;;AACHZ,oBAAQ0B,IAAR,CAAa,UAACC,GAAD,EAAMC,QAAN,EAAmB;AAC5B,oBAAID,GAAJ,EAAS;AACLE,4BAAQN,KAAR,CAAcI,GAAd;AACA;AACH;;AAED,oBAAMf,OAAOgB,SAASE,GAAT,CAAa,UAACC,GAAD,EAAS;AAC/B,2BAAO,EAACC,OAAOD,IAAIE,GAAZ,EAAiBC,OAAOH,IAAII,IAA5B,EAAP;AACH,iBAFY,CAAb;AAGA,uBAAKC,IAAL,CAAUxB,IAAV;AACH,aAVD;AAWH;;;;;;AAGL,IAAMyB,IAAI,IAAIhC,SAAJ,EAAV;AACAgC,EAAEZ,KAAF","file":"Localizer.js","sourcesContent":["const pjson = require('../../package.json');\nconst scanner = require('node-wifi-scanner');\nconst uuid = require('uuid');\nconst http = require('http');\nconst fs = require('fs');\nconst request = require('request');\n\nclass Localizer {\n\n    constructor(){\n        this.id = uuid.v4();\n        try {\n            let oldUUID = fs.readFileSync(\".uuid\", \"utf8\");\n            this.id = oldUUID;\n        }catch(e){\n            fs.writeFileSync(\".uuid\", this.id);\n        }\n    }\n\n    send(rows){\n        const data = {\n            action: \"action\",\n            fp_id: \"336c6582c283421c28479e8801e8edfa\",\n            ap_ids: rows,\n            device_id: this.id,\n            type: \"COMPUTER\"\n        };\n\n\n        request({\n            url: 'http://localhost:8888/rest/localize',\n            json: true,\n            method: \"POST\",\n            body: data\n        }, (error, res, body) => {\n            this.start(rows);\n            // setTimeout(() => {\n            //     this.start(rows);\n            // }, 500);\n        });\n    }\n\n    start(){\n        scanner.scan((err, networks) => {\n            if (err) {\n                console.error(err);\n                return;\n            }\n\n            const rows = networks.map((net) => {\n                return {ap_id: net.mac, value: net.rssi};\n            });\n            this.send(rows);\n        });\n    }\n}\n\nconst l = new Localizer();\nl.start();"]}