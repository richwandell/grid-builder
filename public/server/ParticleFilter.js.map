{"version":3,"sources":["../../src/server/ParticleFilter.es6"],"names":["ParticleFilter","db","fp_id","particles","particleCoords","uniqueParticles","allParticles","getFeaturesCache","guess","oldParticles","keys","Object","keyLength","length","maxX","maxY","i","split","x","y","Number","push","weight","coord","w","Math","sqrt","round","Infinity","features","initializeParticles","featureKeys","featureKeysLength","particleLength","particle","x_y","j","feature","testValue","getFeatureValue","featureValue","diff","abs","pow","getParticleWeight","resample","goodX","goodY","usedXy","sort","a","b","old","gx","gy","key","indexOf","distance","l","max","r","newParticles","c_x","floor","random","c_y","undefined","p"],"mappings":"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","file":"ParticleFilter.js","sourcesContent":["import Db from './Db';\n\nclass ParticleFilter {\n\n    constructor(db: Db, fp_id: string){\n        this.fp_id = fp_id;\n        this.db = db;\n        this.particles = [];\n        this.particleCoords = [];\n        this.uniqueParticles = [];\n        this.allParticles = this.db.getFeaturesCache(this.fp_id);\n        this.guess = [0,0];\n        this.oldParticles = [];\n    }\n\n    setParticles(particles){\n        this.particles = particles;\n        this.allParticles = this.db.getFeaturesCache(this.fp_id);\n    }\n\n    getParticles(){\n        return this.particles;\n    }\n\n    getOldParticles(){\n        return this.oldParticles;\n    }\n\n    initializeParticles(){\n        this.allParticles = this.db.getFeaturesCache(this.fp_id);\n        const keys = Object.keys(this.allParticles);\n        const keyLength = keys.length;\n        let maxX = 0;\n        let maxY = 0;\n        for(let i = 0; i < keyLength; i++){\n            let [x, y] = keys[i].split(\"_\");\n            [x, y] = [Number(x), Number(y)];\n\n            if(x > maxX) maxX = x;\n            if(y > maxY) maxY = y;\n            this.particles.push({\n                x: x,\n                y: y,\n                weight: 0\n            });\n        }\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    getParticleWeight(coord, weight){\n        let w = Math.sqrt(weight);\n        if (Math.round(w) === 0) {\n           w = Infinity;\n        }\n        return w;\n    }\n\n    move(features){\n        if(this.particles.length === 0) this.initializeParticles();\n        this.oldParticles = [];\n        const featureKeys = Object.keys(features);\n        const featureKeysLength = featureKeys.length;\n\n        const particleLength = this.particles.length;\n\n        for(let i = 0; i < particleLength; i++){\n            let particle = this.particles[i];\n            let x_y = particle.x + \"_\" + particle.y;\n\n            for(let j = 0; j < featureKeysLength; j++){\n                let feature = featureKeys[j];\n                let testValue = this.db.getFeatureValue(this.fp_id, x_y, feature);\n                if(testValue){\n                    let featureValue = features[feature];\n                    let diff = Math.abs(testValue - featureValue);\n                    particle.weight += Math.pow(diff, 2);\n                } else {\n                    particle.weight += Math.pow(testValue, 2);\n                }\n            }\n            particle.weight = this.getParticleWeight(x_y, particle.weight);\n            this.oldParticles.push({x: particle.x, y: particle.y, weight: particle.weight});\n        }\n        this.resample();\n    }\n\n    resample(){\n        let goodX = [];\n        let goodY = [];\n        let usedXy = [];\n\n        this.particles = this.particles.sort((a, b) => {\n            if(a.weight >= b.weight){\n                return 1;\n            }else{\n                return -1;\n            }\n        });\n        this.uniqueParticles = [];\n        const particleLength = this.particles.length;\n        for(let i = 0; i < particleLength / 5; i++){\n            const old = this.particles[i];\n            let gx = old.x;\n            let gy = old.y;\n            let key = gx + \"_\" + gy;\n            if(usedXy.indexOf(key) === -1){\n                this.uniqueParticles.push({\n                    x: gx,\n                    y: gy,\n                    distance: old.weight,\n                    weight: old.weight\n                });\n                usedXy.push(key);\n            }\n            if(goodX.indexOf(gx) === -1) {\n                goodX.push(gx);\n\n                let l = Math.max(0, gx - 2);\n                let r = gx + 2;\n                for(; l <= r; l++) {\n                    if (goodX.indexOf(l) === -1){\n                        goodX.push(l);\n                    }\n                }\n            }\n\n            if(goodY.indexOf(gy) === -1) {\n                goodY.push(gy);\n                let l = Math.max(0, gy - 2);\n                let r = gy + 2;\n                for(; l <= r; l++) {\n                    if (goodY.indexOf(l) === -1){\n                        goodY.push(l);\n                    }\n                }\n            }\n        }\n\n        let newParticles = [];\n        this.particleCoords = [];\n        usedXy = [];\n        while (newParticles.length < particleLength) {\n            let c_x = goodX[Math.floor(Math.random() * goodX.length)];\n            let c_y = goodY[Math.floor(Math.random() * goodY.length)];\n            let key = c_x + \"_\" + c_y;\n            if(this.allParticles[key] === undefined){\n                continue;\n            }\n            let p = {\n                x: c_x,\n                y: c_y,\n                weight: 0\n            };\n            if(usedXy.indexOf(key) === -1){\n                usedXy.push(key);\n                this.particleCoords.push({\n                    x: p.x,\n                    y: p.y\n                });\n            }\n            newParticles.push(p);\n        }\n        this.particles = newParticles;\n    }\n\n    getParticleCoords(){\n        return this.particleCoords;\n    }\n\n    getParticleKeys(){\n        let p = {};\n        const particleLength = this.particles.length;\n\n        for(let i = 0; i < particleLength; i++){\n            let key = this.particles[i].x + \"_\" + this.particles[i].y;\n            p[key] = 1;\n        }\n        return p;\n    }\n\n    getUniqueParticles(){\n        return this.uniqueParticles;\n    }\n\n}\n\nexport default ParticleFilter;"]}