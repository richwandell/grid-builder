{"version":3,"sources":["../../src/server/ParticleFilter.es6"],"names":["ParticleFilter","db","fp_id","particles","particleCoords","uniqueParticles","allParticles","getFeaturesCache","guess","oldParticles","numParticles","maxX","getMaxX","maxY","getMaxY","newParticles","length","c_x","Math","floor","random","c_y","key","undefined","p","x","y","weight","push","coord","w","sqrt","round","Infinity","features","initializeParticles","featureKeys","Object","keys","featureKeysLength","particleLength","i","particle","x_y","j","feature","testValue","getFeatureValue","featureValue","diff","abs","pow","getParticleWeight","resample","goodX","goodY","usedXy","sort","a","b","old","gx","gy","indexOf","distance","l","max","r"],"mappings":"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","file":"ParticleFilter.js","sourcesContent":["import Db from './Db';\n\nclass ParticleFilter {\n\n    constructor(db: Db, fp_id: string){\n        this.fp_id = fp_id;\n        this.db = db;\n        this.particles = [];\n        this.particleCoords = [];\n        this.uniqueParticles = [];\n        this.allParticles = this.db.getFeaturesCache(this.fp_id);\n        this.guess = [0,0];\n        this.oldParticles = [];\n        this.numParticles = 20;\n    }\n\n    setParticles(particles){\n        this.particles = particles;\n        this.allParticles = this.db.getFeaturesCache(this.fp_id);\n    }\n\n    getParticles(){\n        return this.particles;\n    }\n\n    getOldParticles(){\n        return this.oldParticles;\n    }\n\n    initializeParticles(){\n        this.allParticles = this.db.getFeaturesCache(this.fp_id);\n\n        const maxX = this.db.getMaxX(this.fp_id);\n        const maxY = this.db.getMaxY(this.fp_id);\n\n        let newParticles = [];\n        while (newParticles.length < this.numParticles) {\n            let c_x = Math.floor(Math.random() * maxX);\n            let c_y = Math.floor(Math.random() * maxY);\n            let key = c_x + \"_\" + c_y;\n            if(this.allParticles[key] === undefined){\n                continue;\n            }\n            let p = {\n                x: c_x,\n                y: c_y,\n                weight: 0\n            };\n            newParticles.push(p);\n        }\n        this.particles = newParticles;\n    }\n\n    getParticleWeight(coord, weight){\n        let w = Math.sqrt(weight);\n        if (Math.round(w) === 0) {\n           w = Infinity;\n        }\n        return w;\n    }\n\n    move(features){\n        if(this.particles.length === 0) this.initializeParticles();\n        this.oldParticles = [];\n        const featureKeys = Object.keys(features);\n        const featureKeysLength = featureKeys.length;\n\n        const particleLength = this.particles.length;\n\n        for(let i = 0; i < particleLength; i++){\n            let particle = this.particles[i];\n            let x_y = particle.x + \"_\" + particle.y;\n\n            for(let j = 0; j < featureKeysLength; j++){\n                let feature = featureKeys[j];\n                let testValue = this.db.getFeatureValue(this.fp_id, x_y, feature);\n                if(testValue){\n                    let featureValue = features[feature];\n                    let diff = Math.abs(testValue - featureValue);\n                    particle.weight += Math.pow(diff, 2);\n                } else {\n                    particle.weight += Math.pow(testValue, 2);\n                }\n            }\n            particle.weight = this.getParticleWeight(x_y, particle.weight);\n            this.oldParticles.push({x: particle.x, y: particle.y, weight: particle.weight});\n        }\n        this.resample();\n    }\n\n    resample(){\n        let goodX = [];\n        let goodY = [];\n        let usedXy = [];\n\n        this.particles = this.particles.sort((a, b) => {\n            if(a.weight >= b.weight){\n                return 1;\n            }else{\n                return -1;\n            }\n        });\n        this.uniqueParticles = [];\n        const particleLength = this.particles.length;\n        for(let i = 0; i < particleLength / 5; i++){\n            const old = this.particles[i];\n            let gx = old.x;\n            let gy = old.y;\n            let key = gx + \"_\" + gy;\n            if(usedXy.indexOf(key) === -1){\n                this.uniqueParticles.push({\n                    x: gx,\n                    y: gy,\n                    distance: old.weight,\n                    weight: old.weight\n                });\n                usedXy.push(key);\n            }\n            if(goodX.indexOf(gx) === -1) {\n                goodX.push(gx);\n\n                let l = Math.max(0, gx - 2);\n                let r = gx + 2;\n                for(; l <= r; l++) {\n                    if (goodX.indexOf(l) === -1){\n                        goodX.push(l);\n                    }\n                }\n            }\n\n            if(goodY.indexOf(gy) === -1) {\n                goodY.push(gy);\n                let l = Math.max(0, gy - 2);\n                let r = gy + 2;\n                for(; l <= r; l++) {\n                    if (goodY.indexOf(l) === -1){\n                        goodY.push(l);\n                    }\n                }\n            }\n        }\n\n        let newParticles = [];\n        this.particleCoords = [];\n        usedXy = [];\n        while (newParticles.length < particleLength) {\n            let c_x = goodX[Math.floor(Math.random() * goodX.length)];\n            let c_y = goodY[Math.floor(Math.random() * goodY.length)];\n            let key = c_x + \"_\" + c_y;\n            if(this.allParticles[key] === undefined){\n                continue;\n            }\n            let p = {\n                x: c_x,\n                y: c_y,\n                weight: 0\n            };\n            if(usedXy.indexOf(key) === -1){\n                usedXy.push(key);\n                this.particleCoords.push({\n                    x: p.x,\n                    y: p.y\n                });\n            }\n            newParticles.push(p);\n        }\n        this.particles = newParticles;\n    }\n\n    getParticleCoords(){\n        return this.particleCoords;\n    }\n\n    getParticleKeys(){\n        let p = {};\n        const particleLength = this.particles.length;\n\n        for(let i = 0; i < particleLength; i++){\n            let key = this.particles[i].x + \"_\" + this.particles[i].y;\n            p[key] = 1;\n        }\n        return p;\n    }\n\n    getUniqueParticles(){\n        return this.uniqueParticles;\n    }\n\n}\n\nexport default ParticleFilter;"]}