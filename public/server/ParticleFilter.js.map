{"version":3,"sources":["../../src/server/ParticleFilter.es6"],"names":["ParticleFilter","db","fp_id","particles","particleCoords","uniqueParticles","allParticles","getFeaturesCache","rParticles","particleLength","length","i","push","x","y","weight","keys","Object","keyLength","maxX","maxY","split","Number","ap_ids","assign","features","initializeParticles","featureKeys","featureKeysLength","particle","j","feature","x_y","testValue","getFeatureValue","featureValue","diff","Math","abs","pow","sqrt","resample","goodX","goodY","sort","a","b","gx","gy","indexOf","l","max","r","newParticles","usedXy","c_x","floor","random","c_y","key","undefined","p"],"mappings":"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","file":"ParticleFilter.js","sourcesContent":["import Db from './Db';\n\nclass ParticleFilter {\n\n    constructor(db: Db, fp_id: string){\n        this.fp_id = fp_id;\n        this.db = db;\n        this.particles = [];\n        this.particleCoords = [];\n        this.uniqueParticles = [];\n        this.allParticles = this.db.getFeaturesCache(this.fp_id);\n    }\n\n    setParticles(particles){\n        this.particles = particles;\n    }\n\n    getParticles(){\n        let rParticles = [];\n        const particleLength = this.particles.length;\n\n        for(let i = 0; i < particleLength; i++){\n            rParticles.push({\n                x: this.particles[i].x,\n                y: this.particles[i].y,\n                weight: 0\n            });\n        }\n        return rParticles;\n    }\n\n    initializeParticles(){\n        this.allParticles = this.db.getFeaturesCache(this.fp_id);\n        const keys = Object.keys(this.allParticles);\n        const keyLength = keys.length;\n        let maxX = 0;\n        let maxY = 0;\n        for(let i = 0; i < keyLength; i++){\n            let [x, y] = keys[i].split(\"_\");\n            [x, y] = [Number(x), Number(y)];\n\n            if(x > maxX) maxX = x;\n            if(y > maxY) maxY = y;\n            this.particles.push({\n                x: x,\n                y: y,\n                ap_ids: Object.assign({}, this.allParticles[keys[i]]),\n                weight: 0\n            });\n        }\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    move(features){\n        if(this.particles.length === 0) this.initializeParticles();\n\n        const featureKeys = Object.keys(features);\n        const featureKeysLength = featureKeys.length;\n\n        const particleLength = this.particles.length;\n\n        for(let i = 0; i < particleLength; i++){\n            let particle = this.particles[i];\n\n            for(let j = 0; j < featureKeysLength; j++){\n                let feature = featureKeys[j];\n                let x_y = particle.x + \"_\" + particle.y;\n                let testValue = this.db.getFeatureValue(this.fp_id, x_y, feature);\n                if(testValue){\n                    let featureValue = features[feature];\n                    let diff = Math.abs(testValue - featureValue);\n                    particle.weight += Math.pow(diff, 2);\n                } else {\n                    particle.weight += Math.pow(testValue, 2);\n                }\n            }\n            particle.weight = Math.sqrt(particle.weight);\n        }\n        this.resample();\n    }\n\n    resample(){\n        let goodX = [];\n        let goodY = [];\n        this.particles = this.particles.sort((a, b) => {\n            if(a.weight >= b.weight){\n                return 1;\n            }else{\n                return -1;\n            }\n        });\n        const particleLength = this.particles.length;\n        for(let i = 0; i < particleLength / 5; i++){\n            let gx = this.particles[i].x;\n            let gy = this.particles[i].y;\n            if(goodX.indexOf(gx) === -1) {\n                goodX.push(gx);\n\n                let l = Math.max(0, gx - 1);\n                let r = gx + 1;\n                for(; l <= r; l++) {\n                    if (goodX.indexOf(l) === -1){\n                        goodX.push(l);\n                    }\n                }\n            }\n\n            if(goodY.indexOf(gy) === -1) {\n                goodY.push(gy);\n                let l = Math.max(0, gy - 1);\n                let r = gy + 1;\n                for(; l <= r; l++) {\n                    if (goodY.indexOf(l) === -1){\n                        goodY.push(l);\n                    }\n                }\n            }\n        }\n\n        let newParticles = [];\n        this.particleCoords = [];\n        this.uniqueParticles = [];\n        let usedXy = [];\n        while (newParticles.length < particleLength) {\n            let c_x = goodX[Math.floor(Math.random() * goodX.length)];\n            let c_y = goodY[Math.floor(Math.random() * goodY.length)];\n            let key = c_x + \"_\" + c_y;\n            if(this.allParticles[key] === undefined){\n                continue;\n            }\n            let p = {\n                x: c_x,\n                y: c_y,\n                ap_ids: Object.assign({}, this.allParticles[key]),\n                weight: 0\n            };\n            if(usedXy.indexOf(key) === -1){\n                usedXy.push(key);\n                this.particleCoords.push({\n                    x: p.x,\n                    y: p.y\n                });\n                this.uniqueParticles.push(p);\n            }\n            newParticles.push(p);\n        }\n        this.particles = newParticles;\n    }\n\n    getParticleCoords(){\n        return this.particleCoords;\n    }\n\n    getParticleKeys(){\n        let p = {};\n        const particleLength = this.particles.length;\n\n        for(let i = 0; i < particleLength; i++){\n            let key = this.particles[i].x + \"_\" + this.particles[i].y;\n            p[key] = 1;\n        }\n        return p;\n    }\n\n    getUniqueParticles(){\n        return this.uniqueParticles;\n    }\n\n}\n\nexport default ParticleFilter;"]}