{"version":3,"sources":["Db.es6"],"names":["sqlite3","require","verbose","Db","log","db","Database","debug","databaseCodeVersion","serialize","migration1","forEach","mig","run","creates","create","databaseVersion","all","err","rows","row","key","Number","value","database_code_version","doUpgrade","cb","query_get_all_floorplans","query_get_database_version","data","stmt","prepare","query_insert_version","finalize","query_update_version","layout_images","length","query_insert_layout","upstmt","query_update_layout","el","id","stringdata","JSON","stringify","payload","query_insert_scan_results","s_id","fp_id","ap_id","x","y","orig_values","created","drops","module","exports"],"mappings":"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","file":"Db.js","sourcesContent":["let sqlite3 = require('sqlite3').verbose();\n\nclass Db {\n\n    static database_code_version = 0;\n    static query_get_all_floorplans = \"select * from layout_images\";\n    static query_get_database_version = \"select value from settings where key = 'database_version';\";\n    static query_insert_version = \"insert or ignore into settings values ('database_version', ?);\";\n    static query_update_version = \"update settings set value = ? where key = 'database_version';\";\n    static query_insert_layout = \"insert or ignore into layout_images values (?, ?);\";\n    static query_update_layout = \"update layout_images set layout_image = ? where id = ?;\";\n    static query_insert_scan_results = \"insert or ignore into scan_results values (?, ?, ?, ?, ?, ?, ?, ?);\";\n\n    static creates = [\n        \"CREATE TABLE if not exists layout_images (id TEXT PRIMARY KEY, layout_image TEXT);\",\n        \"CREATE UNIQUE INDEX if not exists layout_images_id_uindex ON layout_images (id);\",\n\n        /**\n         * Create the settings table with default settings\n         */\n        \"create table if not exists settings (key TEXT PRIMARY KEY, value TEXT);\",\n        \"create unique index if not exists settings_key on settings (key);\",\n        \"insert or ignore into settings (key, value) values ('database_version', 0);\",\n        \"insert or ignore into settings (key, value) values ('database_code_version', 0);\",\n\n        /**\n         * ap_id = access point id\n         * fp_id = floorplan id\n         */\n        \"CREATE TABLE if not exists scan_results \" +\n        \"(s_id INTEGER, fp_id TEXT, ap_id TEXT, x INTEGER, \" +\n        \"y INTEGER, value REAL, orig_values TEXT, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, \" +\n        \"PRIMARY KEY (s_id, fp_id, ap_id), \" +\n        \"CONSTRAINT scan_results_layout_images_id_fk FOREIGN KEY (fp_id) REFERENCES layout_images (id));\",\n        \"create index if not exists x_and_y on scan_results (x, y);\"\n    ];\n\n    static drops = [\n        \"drop table if exists layout_images;\",\n        \"drop table if exists settings;\",\n        \"drop table if exists scan_results;\"\n    ];\n\n    static migration1 = [\n        \"ALTER TABLE scan_results ADD created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL;\",\n        \"update settings set val = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    constructor(log){\n        this.log = log;\n        this.db = new sqlite3.Database('db.sqlite3');\n        this.log.debug(\"Db.constructor\");\n    }\n\n    doUpgrade(databaseCodeVersion) {\n        this.log.debug(\"Db.doUpgrade\");\n        let db = this.db;\n        switch(databaseCodeVersion){\n            case 0:\n                db.serialize(function() {\n                    Db.migration1.forEach(function(mig){\n                        db.run(mig);\n                    });\n                });\n                break;\n        }\n    }\n\n    /**\n     * Creates the sqlite tables\n     */\n    createTables(log) {\n        this.log.debug(\"Db.createTables\");\n        let creates = Db.creates;\n        let db = this.db;\n\n        db.serialize(function() {\n            creates.forEach(function(create){\n                db.run(create);\n            });\n        });\n\n        let databaseVersion = 0;\n        let databaseCodeVersion = 0;\n\n        db.all(\"select * from settings\", (err, rows) => {\n            rows.forEach(function(row){\n                switch(row.key){\n                    case \"database_version\":\n                        databaseVersion = Number(row.value);\n                        break;\n\n                    case \"database_code_version\":\n                        databaseCodeVersion = Number(row.value);\n                        break;\n                }\n            });\n            if(databaseCodeVersion < Db.database_code_version){\n                this.doUpgrade(databaseCodeVersion);\n            }\n        });\n    }\n\n    getFloorPlans(cb) {\n        this.log.debug(\"Db.getFloorPlans\");\n        let db = this.db;\n        db.all(Db.query_get_all_floorplans, cb);\n    }\n\n    getDatabaseVersion(cb) {\n        this.log.debug(\"Db.getDatabaseVersion\");\n        let db = this.db;\n        db.all(Db.query_get_database_version, cb);\n    }\n\n    updateDatabase(data, cb) {\n        this.log.debug(\"Db.updateDatabase\");\n        let db = this.db;\n        let stmt = db.prepare(Db.query_insert_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        stmt = db.prepare(Db.query_update_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        if(typeof(data.layout_images) != \"undefined\" && data.layout_images.length > 0){\n            stmt = db.prepare(Db.query_insert_layout);\n            let upstmt = db.prepare(Db.query_update_layout);\n\n            data.layout_images.forEach(function(el){\n                let id = el.id;\n                let stringdata = JSON.stringify(el);\n                stmt.run(id, stringdata);\n                upstmt.run(stringdata, id);\n            });\n            stmt.finalize();\n            upstmt.finalize();\n        }\n\n        cb();\n    }\n\n    saveReadings(payload, cb){\n        let log = this.log;\n        let db = this.db;\n        log.debug(\"Db.saveReadings\");\n\n        let stmt = db.prepare(Db.query_insert_scan_results);\n\n        payload.forEach(function (el) {\n            let s_id = Number(el.s_id);\n            let fp_id = el.fp_id;\n            let ap_id = el.ap_id;\n            let x = Number(el.x);\n            let y = Number(el.y);\n            let value = Number(el.value);\n            let orig_values = el.orig_values;\n            let created = el.created;\n            stmt.run(s_id, fp_id, ap_id, x, y, value, orig_values, created);\n        });\n\n        stmt.finalize();\n    }\n}\n\n\nmodule.exports = Db;"]}