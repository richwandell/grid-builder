{"version":3,"sources":["Db.es6"],"names":["sqlite3","require","verbose","Db","log","db","Database","debug","databaseCodeVersion","serialize","migration1","forEach","mig","run","creates","create","all","err","rows","row","key","Number","value","database_code_version","doUpgrade","cb","query_get_all_floorplans","query_get_database_version","data","stmt","prepare","query_insert_version","databaseVersion","finalize","query_update_version","layout_images","length","query_insert_layout","upstmt","query_update_layout","el","id","floor_plan_name","floorplanname","stringdata","JSON","stringify","payload","query_insert_scan_results","s_id","fp_id","ap_id","x","y","orig_values","created","updateKalman","kalman","query_get_for_kalman","insert","query_insert_kalman_estimates","update","query_update_kalman_estimates","done","k","cest","values","split","map","i","addSample","getEstimate","exec","query_update_features","query_get_scan_results","query_get_features","drops","module","exports"],"mappings":";;;;AAAA;;;;;;;;AAEA,IAAIA,UAAUC,QAAQ,SAAR,EAAmBC,OAAnB,EAAd;;IAEMC,E;AAyEF,gBAAYC,GAAZ,EAAgB;AAAA;;AACZ,aAAKA,GAAL,GAAWA,GAAX;AACA,aAAKC,EAAL,GAAU,IAAIL,QAAQM,QAAZ,CAAqB,YAArB,CAAV;AACA,aAAKF,GAAL,CAASG,KAAT,CAAe,gBAAf;AACH;;;;sCAEY;AACT,mBAAO,KAAKF,EAAZ;AACH;;;kCAESG,mB,EAAqB;AAC3B,iBAAKJ,GAAL,CAASG,KAAT,CAAe,cAAf;AACA,gBAAIF,KAAK,KAAKA,EAAd;AACA,oBAAOG,mBAAP;AACI,qBAAK,CAAL;AACIH,uBAAGI,SAAH,CAAa,YAAW;AACpBN,2BAAGO,UAAH,CAAcC,OAAd,CAAsB,UAASC,GAAT,EAAa;AAC/BP,+BAAGQ,GAAH,CAAOD,GAAP;AACH,yBAFD;AAGH,qBAJD;AAKA;AAPR;AASH;;AAED;;;;;;uCAGe;AAAA;;AACX,iBAAKR,GAAL,CAASG,KAAT,CAAe,iBAAf;AACA,gBAAIO,UAAUX,GAAGW,OAAjB;AACA,gBAAIT,KAAK,KAAKA,EAAd;;AAEAA,eAAGI,SAAH,CAAa,YAAW;AACpBK,wBAAQH,OAAR,CAAgB,UAASI,MAAT,EAAgB;AAC5BV,uBAAGQ,GAAH,CAAOE,MAAP;AACH,iBAFD;AAGH,aAJD;;AAMA,gBAAIP,sBAAsB,CAA1B;;AAEAH,eAAGW,GAAH,CAAO,wBAAP,EAAiC,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC5CA,qBAAKP,OAAL,CAAa,UAASQ,GAAT,EAAa;AACtB,4BAAOA,IAAIC,GAAX;AACI,6BAAK,uBAAL;AACIZ,kDAAsBa,OAAOF,IAAIG,KAAX,CAAtB;AACA;AAHR;AAKH,iBAND;AAOA,oBAAGd,sBAAsBL,GAAGoB,qBAA5B,EAAkD;AAC9C,0BAAKC,SAAL,CAAehB,mBAAf;AACH;AACJ,aAXD;AAYH;;;sCAEaiB,E,EAAI;AACd,iBAAKrB,GAAL,CAASG,KAAT,CAAe,kBAAf;AACA,gBAAIF,KAAK,KAAKA,EAAd;AACAA,eAAGW,GAAH,CAAOb,GAAGuB,wBAAV,EAAoCD,EAApC;AACH;;;2CAEkBA,E,EAAI;AACnB,iBAAKrB,GAAL,CAASG,KAAT,CAAe,uBAAf;AACA,gBAAIF,KAAK,KAAKA,EAAd;AACAA,eAAGW,GAAH,CAAOb,GAAGwB,0BAAV,EAAsCF,EAAtC;AACH;;;uCAEcG,I,EAAMH,E,EAAI;AACrB,iBAAKrB,GAAL,CAASG,KAAT,CAAe,mBAAf;AACA,gBAAIF,KAAK,KAAKA,EAAd;AACA,gBAAIwB,OAAOxB,GAAGyB,OAAH,CAAW3B,GAAG4B,oBAAd,CAAX;AACAF,iBAAKhB,GAAL,CAASe,KAAKI,eAAd;AACAH,iBAAKI,QAAL;;AAEAJ,mBAAOxB,GAAGyB,OAAH,CAAW3B,GAAG+B,oBAAd,CAAP;AACAL,iBAAKhB,GAAL,CAASe,KAAKI,eAAd;AACAH,iBAAKI,QAAL;;AAEA,gBAAG,OAAOL,KAAKO,aAAZ,IAA8B,WAA9B,IAA6CP,KAAKO,aAAL,CAAmBC,MAAnB,GAA4B,CAA5E,EAA8E;AAC1EP,uBAAOxB,GAAGyB,OAAH,CAAW3B,GAAGkC,mBAAd,CAAP;AACA,oBAAIC,SAASjC,GAAGyB,OAAH,CAAW3B,GAAGoC,mBAAd,CAAb;;AAEAX,qBAAKO,aAAL,CAAmBxB,OAAnB,CAA2B,UAAS6B,EAAT,EAAY;AACnC,wBAAIC,KAAKD,GAAGC,EAAZ;AACA,wBAAIC,kBAAkBF,GAAGG,aAAzB;AACA,wBAAIC,aAAaC,KAAKC,SAAL,CAAeN,EAAf,CAAjB;AACAX,yBAAKhB,GAAL,CAAS4B,EAAT,EAAaG,UAAb,EAAyBF,eAAzB;AACAJ,2BAAOzB,GAAP,CAAW+B,UAAX,EAAuBF,eAAvB,EAAwCD,EAAxC;AACH,iBAND;AAOAZ,qBAAKI,QAAL;AACAK,uBAAOL,QAAP;AACH;;AAEDR;AACH;;;qCAEYsB,O,EAAStB,E,EAAG;AACrB,gBAAIrB,MAAM,KAAKA,GAAf;AACA,gBAAIC,KAAK,KAAKA,EAAd;AACAD,gBAAIG,KAAJ,CAAU,iBAAV;;AAEA,gBAAIsB,OAAOxB,GAAGyB,OAAH,CAAW3B,GAAG6C,yBAAd,CAAX;;AAEAD,oBAAQpC,OAAR,CAAgB,UAAC6B,EAAD,EAAQ;AACpB,oBAAIS,OAAO5B,OAAOmB,GAAGS,IAAV,CAAX;AACA,oBAAIC,QAAQV,GAAGU,KAAf;AACA,oBAAIC,QAAQX,GAAGW,KAAf;AACA,oBAAIC,IAAI/B,OAAOmB,GAAGY,CAAV,CAAR;AACA,oBAAIC,IAAIhC,OAAOmB,GAAGa,CAAV,CAAR;AACA,oBAAI/B,QAAQD,OAAOmB,GAAGlB,KAAV,CAAZ;AACA,oBAAIgC,cAAcd,GAAGc,WAArB;AACA,oBAAIC,UAAUf,GAAGe,OAAjB;AACA1B,qBAAKhB,GAAL,CAASoC,IAAT,EAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,CAA7B,EAAgCC,CAAhC,EAAmC/B,KAAnC,EAA0CgC,WAA1C,EAAuDC,OAAvD;AACH,aAVD;;AAYA1B,iBAAKI,QAAL;AACA,iBAAKuB,YAAL;AACH;;;uCAEa;AACV,gBAAIpD,MAAM,KAAKA,GAAf;AACA,gBAAIC,KAAK,KAAKA,EAAd;AACA,gBAAIoD,SAAS,EAAb;;AAEApD,eAAGW,GAAH,CAAOb,GAAGuD,oBAAV,EAAgC,UAACzC,GAAD,EAAMC,IAAN,EAAe;AAC3C,oBAAMyC,SAAStD,GAAGyB,OAAH,CAAW3B,GAAGyD,6BAAd,CAAf;AACA,oBAAMC,SAASxD,GAAGyB,OAAH,CAAW3B,GAAG2D,6BAAd,CAAf;AACA1D,oBAAIA,GAAJ,CAAQa,GAAR;AACA,oBAAGA,GAAH,EAAQ;;AAER,oBAAI8C,OAAO,CAAX;AACA7C,qBAAKP,OAAL,CAAa,UAACQ,GAAD,EAAS;AAClB,wBAAI6C,IAAI,KAAR;AACA,wBAAI,OAAOP,OAAOtC,IAAI+B,KAAJ,GAAY/B,IAAIgC,KAAhB,GAAwBhC,IAAIiC,CAA5B,GAAgCjC,IAAIkC,CAA3C,CAAP,IAAyD,WAA7D,EAA0E;AACtEI,+BAAOtC,IAAI+B,KAAJ,GAAY/B,IAAIgC,KAAhB,GAAwBhC,IAAIiC,CAA5B,GAAgCjC,IAAIkC,CAA3C,IAAgD,2BAAiBlC,IAAI8C,IAArB,CAAhD;AACH;AACDD,wBAAIP,OAAOtC,IAAI+B,KAAJ,GAAY/B,IAAIgC,KAAhB,GAAwBhC,IAAIiC,CAA5B,GAAgCjC,IAAIkC,CAA3C,CAAJ;;AAEA,wBAAIa,SAAS/C,IAAI+C,MAAJ,CACRC,KADQ,CACF,GADE,EAERC,GAFQ,CAEJ,UAAC5B,EAAD,EAAQ;AAAE,+BAAOnB,OAAOmB,EAAP,CAAP;AAAoB,qBAF1B,CAAb;;AAIA,yBAAI,IAAI6B,IAAI,CAAZ,EAAeA,IAAIH,OAAO9B,MAA1B,EAAkCiC,GAAlC,EAAsC;AAClCL,0BAAEM,SAAF,CAAYJ,OAAOG,CAAP,CAAZ;AACH;AACDV,2BAAO9C,GAAP,CAAWM,IAAI+B,KAAf,EAAsB/B,IAAIgC,KAA1B,EAAiChC,IAAIiC,CAArC,EAAwCjC,IAAIkC,CAA5C,EAA+CW,EAAEO,WAAF,EAA/C,EAAgE,YAAM;AAClEV,+BAAOhD,GAAP,CAAWmD,EAAEO,WAAF,EAAX,EAA4BpD,IAAI+B,KAAhC,EAAuC/B,IAAIgC,KAA3C,EAAkDhC,IAAIiC,CAAtD,EAAyDjC,IAAIkC,CAA7D,EAAgE,YAAM;AAClEU;AACA,gCAAGA,QAAQ7C,KAAKkB,MAAhB,EAAuB;AACnBuB,uCAAO1B,QAAP;AACA4B,uCAAO5B,QAAP;AACA5B,mCAAGmE,IAAH,CAAQ,sBAAR,EAAgC,YAAM;AAClCnE,uCAAGmE,IAAH,CAAQrE,GAAGsE,qBAAX;AACH,iCAFD;AAGH;AACJ,yBATD;AAUH,qBAXD;AAYH,iBA1BD;AA2BH,aAlCD;AAmCH;;;;;;AAvOCtE,E,CAEKoB,qB,GAAwB,C;AAF7BpB,E,CAGKuB,wB,GAA2B,6B;AAHhCvB,E,CAIKwB,0B,GAA6B,4D;AAJlCxB,E,CAKK4B,oB,GAAuB,gE;AAL5B5B,E,CAMK+B,oB,GAAuB,+D;AAN5B/B,E,CAOKkC,mB,GAAsB,uD;AAP3BlC,E,CAQKoC,mB,GAAsB,8E;AAR3BpC,E,CASK6C,yB,GAA4B,qE;AATjC7C,E,CAUKuE,sB,GAAyB,6B;AAV9BvE,E,CAWKuD,oB,GAAuB,wCAC5B,kCAD4B,GAE5B,yEAF4B,GAG5B,yCAH4B,GAI5B,4FAJ4B,GAK5B,sC;AAhBAvD,E,CAiBKyD,6B,GAAgC,gE;AAjBrCzD,E,CAkBK2D,6B,GAAgC,8EACrC,mB;AAnBA3D,E,CAoBKsE,qB,GAAwB,0BAC7B,gGAD6B,GAE7B,wGAF6B,GAG7B,0C;AAvBAtE,E,CAwBKwE,kB,GAAqB,mEAC1B,yD;AAzBAxE,E,CA2BKW,O,GAAU,CACb,oFADa,EAEb,kFAFa;;AAIb;;;AAGA,yEAPa,EAQb,mEARa,EASb,6EATa,EAUb,kFAVa;;AAYb;;;;AAIA,6CACA,oDADA,GAEA,iGAFA,GAGA,oCAHA,GAIA,iGApBa,EAqBb,4DArBa,EAuBb,qFACE,0BADF,GAEE,kFAFF,GAGE,kGA1BW,EA4Bb,sGACE,gFA7BW,EA8Bb,2FA9Ba,EA+Bb,0EA/Ba,C;AA3BfX,E,CA6DKyE,K,GAAQ,CACX,qCADW,EAEX,gCAFW,EAGX,oCAHW,EAIX,wCAJW,C;AA7DbzE,E,CAoEKO,U,GAAa,CAChB,0DADgB,EAEhB,kCAAkCP,GAAGoB,qBAArC,GAA6D,wCAF7C,C;;;AAuKxBsD,OAAOC,OAAP,GAAiB3E,EAAjB","file":"Db.js","sourcesContent":["import KalmanFilter from './KalmanFilter';\n\nlet sqlite3 = require('sqlite3').verbose();\n\nclass Db {\n\n    static database_code_version = 1;\n    static query_get_all_floorplans = \"select * from layout_images\";\n    static query_get_database_version = \"select value from settings where key = 'database_version';\";\n    static query_insert_version = \"insert or ignore into settings values ('database_version', ?);\";\n    static query_update_version = \"update settings set value = ? where key = 'database_version';\";\n    static query_insert_layout = \"insert or ignore into layout_images values (?, ?, ?);\";\n    static query_update_layout = \"update layout_images set layout_image = ?, floor_plan_name = ? where id = ?;\";\n    static query_insert_scan_results = \"insert or ignore into scan_results values (?, ?, ?, ?, ?, ?, ?, ?);\";\n    static query_get_scan_results = \"select * from scan_results;\";\n    static query_get_for_kalman = \"SELECT s.fp_id, s.ap_id, s.x, s.y, \"\n    + \"group_concat(s.value) `values`, \"\n    + \"case when k.kalman is null then avg(s.value) else k.kalman end `cest`, \"\n    + \"k.kalman FROM scan_results s left join \"\n    + \"kalman_estimates k on s.fp_id = k.fp_id and s.ap_id = k.ap_id and s.x = k.x and s.y = k.y \"\n    + \"GROUP BY s.fp_id, s.ap_id, s.x, s.y;\";\n    static query_insert_kalman_estimates = \"insert or ignore into kalman_estimates values (?, ?, ?, ?, ?);\"\n    static query_update_kalman_estimates = \"update kalman_estimates set kalman = ? where fp_id = ? and ap_id = ? and \"\n    + \" x = ? and y = ?;\";\n    static query_update_features = \"insert into features \"\n    + \" select k.fp_id, k.x, k.y, k.ap_id || k1.ap_id as feature, abs(k.kalman - k1.kalman) as value \"\n    + \" from kalman_estimates k join kalman_estimates k1 on k.fp_id = k1.fp_id and k.x = k1.x and k.y = k1.y \"\n    + \" where k.kalman != 0 and k1.kalman != 0;\";\n    static query_get_features = \"select f.*, abs(value - :feature_value:) diff from features f \"\n    + \" where f.feature = ? and f.fp_id = ? order by diff asc;\";\n\n    static creates = [\n        \"CREATE TABLE if not exists layout_images (id TEXT PRIMARY KEY, layout_image TEXT);\",\n        \"CREATE UNIQUE INDEX if not exists layout_images_id_uindex ON layout_images (id);\",\n\n        /**\n         * Create the settings table with default settings\n         */\n        \"create table if not exists settings (key TEXT PRIMARY KEY, value TEXT);\",\n        \"create unique index if not exists settings_key on settings (key);\",\n        \"insert or ignore into settings (key, value) values ('database_version', 0);\",\n        \"insert or ignore into settings (key, value) values ('database_code_version', 0);\",\n\n        /**\n         * ap_id = access point id\n         * fp_id = floorplan id\n         */\n        \"CREATE TABLE if not exists scan_results \" +\n        \"(s_id INTEGER, fp_id TEXT, ap_id TEXT, x INTEGER, \" +\n        \"y INTEGER, value REAL, orig_values TEXT, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, \" +\n        \"PRIMARY KEY (s_id, fp_id, ap_id), \" +\n        \"CONSTRAINT scan_results_layout_images_id_fk FOREIGN KEY (fp_id) REFERENCES layout_images (id));\",\n        \"create index if not exists x_and_y on scan_results (x, y);\",\n\n        \"CREATE TABLE if not exists kalman_estimates (fp_id TEXT, ap_id TEXT, x INTEGER, \"\n        + \"y INTEGER, kalman REAL, \"\n        + \"CONSTRAINT kalman_estimates_fp_id_ap_id_x_y_pk PRIMARY KEY (fp_id, ap_id, x, y),\"\n        + \"FOREIGN KEY (ap_id, fp_id, x, y) REFERENCES scan_results (ap_id, fp_id, x, y) ON DELETE CASCADE)\",\n\n        \"CREATE TABLE if not exists features (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, \"\n        + \" CONSTRAINT features_fp_id_x_y_feature_pk PRIMARY KEY (fp_id, x, y, feature));\",\n        \"CREATE UNIQUE INDEX if not exists features_feature_index1 ON features(fp_id,feature,x,y);\",\n        \"CREATE INDEX if not exists features_feature_index2 ON features(feature);\"\n    ];\n\n    static drops = [\n        \"drop table if exists layout_images;\",\n        \"drop table if exists settings;\",\n        \"drop table if exists scan_results;\",\n        \"drop table if exists kalman_estimates;\"\n    ];\n\n    static migration1 = [\n        \"ALTER TABLE layout_images ADD floor_plan_name TEXT NULL;\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    constructor(log){\n        this.log = log;\n        this.db = new sqlite3.Database('db.sqlite3');\n        this.log.debug(\"Db.constructor\");\n    }\n\n    getDatabase(){\n        return this.db;\n    }\n\n    doUpgrade(databaseCodeVersion) {\n        this.log.debug(\"Db.doUpgrade\");\n        let db = this.db;\n        switch(databaseCodeVersion){\n            case 0:\n                db.serialize(function() {\n                    Db.migration1.forEach(function(mig){\n                        db.run(mig);\n                    });\n                });\n                break;\n        }\n    }\n\n    /**\n     * Creates the sqlite tables\n     */\n    createTables() {\n        this.log.debug(\"Db.createTables\");\n        let creates = Db.creates;\n        let db = this.db;\n\n        db.serialize(function() {\n            creates.forEach(function(create){\n                db.run(create);\n            });\n        });\n\n        let databaseCodeVersion = 0;\n\n        db.all(\"select * from settings\", (err, rows) => {\n            rows.forEach(function(row){\n                switch(row.key){\n                    case \"database_code_version\":\n                        databaseCodeVersion = Number(row.value);\n                        break;\n                }\n            });\n            if(databaseCodeVersion < Db.database_code_version){\n                this.doUpgrade(databaseCodeVersion);\n            }\n        });\n    }\n\n    getFloorPlans(cb) {\n        this.log.debug(\"Db.getFloorPlans\");\n        let db = this.db;\n        db.all(Db.query_get_all_floorplans, cb);\n    }\n\n    getDatabaseVersion(cb) {\n        this.log.debug(\"Db.getDatabaseVersion\");\n        let db = this.db;\n        db.all(Db.query_get_database_version, cb);\n    }\n\n    updateDatabase(data, cb) {\n        this.log.debug(\"Db.updateDatabase\");\n        let db = this.db;\n        let stmt = db.prepare(Db.query_insert_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        stmt = db.prepare(Db.query_update_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        if(typeof(data.layout_images) != \"undefined\" && data.layout_images.length > 0){\n            stmt = db.prepare(Db.query_insert_layout);\n            let upstmt = db.prepare(Db.query_update_layout);\n\n            data.layout_images.forEach(function(el){\n                let id = el.id;\n                let floor_plan_name = el.floorplanname;\n                let stringdata = JSON.stringify(el);\n                stmt.run(id, stringdata, floor_plan_name);\n                upstmt.run(stringdata, floor_plan_name, id);\n            });\n            stmt.finalize();\n            upstmt.finalize();\n        }\n\n        cb();\n    }\n\n    saveReadings(payload, cb){\n        let log = this.log;\n        let db = this.db;\n        log.debug(\"Db.saveReadings\");\n\n        let stmt = db.prepare(Db.query_insert_scan_results);\n\n        payload.forEach((el) => {\n            let s_id = Number(el.s_id);\n            let fp_id = el.fp_id;\n            let ap_id = el.ap_id;\n            let x = Number(el.x);\n            let y = Number(el.y);\n            let value = Number(el.value);\n            let orig_values = el.orig_values;\n            let created = el.created;\n            stmt.run(s_id, fp_id, ap_id, x, y, value, orig_values, created);\n        });\n\n        stmt.finalize();\n        this.updateKalman();\n    }\n\n    updateKalman(){\n        let log = this.log;\n        let db = this.db;\n        let kalman = {};\n\n        db.all(Db.query_get_for_kalman, (err, rows) => {\n            const insert = db.prepare(Db.query_insert_kalman_estimates);\n            const update = db.prepare(Db.query_update_kalman_estimates);\n            log.log(err);\n            if(err) return;\n\n            let done = 0;\n            rows.forEach((row) => {\n                let k = false;\n                if (typeof(kalman[row.fp_id + row.ap_id + row.x + row.y]) == \"undefined\") {\n                    kalman[row.fp_id + row.ap_id + row.x + row.y] = new KalmanFilter(row.cest);\n                }\n                k = kalman[row.fp_id + row.ap_id + row.x + row.y];\n\n                let values = row.values\n                    .split(\",\")\n                    .map((el) => { return Number(el); });\n\n                for(let i = 0; i < values.length; i++){\n                    k.addSample(values[i]);\n                }\n                insert.run(row.fp_id, row.ap_id, row.x, row.y, k.getEstimate(), () => {\n                    update.run(k.getEstimate(), row.fp_id, row.ap_id, row.x, row.y, () => {\n                        done++;\n                        if(done >= rows.length){\n                            insert.finalize();\n                            update.finalize();\n                            db.exec(\"delete from features\", () => {\n                                db.exec(Db.query_update_features);\n                            });\n                        }\n                    });\n                });\n            });\n        });\n    }\n}\n\n\nmodule.exports = Db;"]}