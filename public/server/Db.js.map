{"version":3,"sources":["../../src/server/Db.es6"],"names":["sqlite3","require","verbose","Db","log","database","debug","db","cached","Database","serialize","exec","featuresCache","fp_id","undefined","Promise","resolve","reject","all","err","rows","length","x","y","feature","value","i","coord","JSON","stringify","Object","keys","fp","c","databaseCodeVersion","cb","migration1","forEach","mig","run","createTables","migration2","migration3","migration4","migration5","creates","create","row","key","Number","database_code_version","doUpgrade","query_get_scanned_coords","query_get_all_floorplans","data","stmt","prepare","query_insert_version","databaseVersion","finalize","query_update_version","layout_images","query_insert_layout","upstmt","query_update_layout","el","id","floor_plan_name","floorplanname","stringdata","payload","query_insert_scan_results","finished","xy","get","query_get_scan_id","query_update_scan_id","s_id","ap_id","indexOf","push","orig_values","created","call","split","updateKalman","kalman","query_get_for_kalman","insert","query_insert_kalman_estimates","update","query_update_kalman_estimates","error","done","k","cest","values","map","addSample","getEstimate","query_update_features","console","close","query_get_database_version","query_get_scan_results","query_update_oldest_features","query_get_features","query_get_min_sid","drops","module","exports"],"mappings":"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","file":"Db.js","sourcesContent":["import KalmanFilter from './KalmanFilter';\n\nlet sqlite3 = require('sqlite3').verbose();\n\nclass Db {\n\n    static database_code_version = 5;\n    static query_get_all_floorplans = \"select * from layout_images\";\n    static query_get_database_version = \"select value from settings where key = 'database_version';\";\n    static query_insert_version = \"insert or ignore into settings values ('database_version', ?);\";\n    static query_update_version = \"update settings set value = ? where key = 'database_version';\";\n    static query_insert_layout = \"insert or ignore into layout_images values (?, ?, ?);\";\n    static query_update_layout = \"update layout_images set layout_image = ?, floor_plan_name = ? where id = ?;\";\n    static query_insert_scan_results = \"insert into scan_results values (?, ?, ?, ?, ?, ?, ?, ?);\";\n    static query_get_scan_results = \"select * from scan_results;\";\n    static query_get_for_kalman = \"SELECT s.fp_id, s.ap_id, s.x, s.y, \"\n    + \"group_concat(s.value) `values`, \"\n    + \"case when k.kalman is null then avg(s.value) else k.kalman end `cest`, \"\n    + \"k.kalman FROM scan_results s left join \"\n    + \"kalman_estimates k on s.fp_id = k.fp_id and s.ap_id = k.ap_id and s.x = k.x and s.y = k.y \"\n    + \" where s.fp_id = ? and s.value != 0 and s.x = ? and s.y = ? GROUP BY s.fp_id, s.ap_id, s.x, s.y;\";\n    static query_insert_kalman_estimates = \"insert or ignore into kalman_estimates values (?, ?, ?, ?, ?);\";\n    static query_update_kalman_estimates = \"update kalman_estimates set kalman = ? where fp_id = ? and ap_id = ? and \"\n    + \" x = ? and y = ?;\";\n    static query_update_features = \"insert into features \"\n    + \" select k.fp_id, k.x, k.y, k.ap_id || k1.ap_id as feature, abs(k.kalman - k1.kalman) as value \"\n    + \" from kalman_estimates k join kalman_estimates k1 on k.fp_id = k1.fp_id and k.x = k1.x and k.y = k1.y\"\n    + \" where value != 0 and k.fp_id = ? and k1.fp_id = ? and k.x = ? and k1.x = ? and k.y = ? and k1.y = ?\";\n    static query_update_oldest_features = \"select k.fp_id, k.x, k.y, k.ap_id || k1.ap_id as feature, \"\n    + \" abs(k.kalman - k1.kalman) as value, :scan_id: s_id from kalman_estimates k join \"\n    + \" kalman_estimates k1 on k.fp_id = k1.fp_id and k.x = k1.x and k.y = k1.y and k.ap_id < k1.ap_id where\"\n    + \" k.kalman != 0 and k1.kalman != 0 and k.fp_id = ? and k1.fp_id = ?;\";\n    static query_get_features = \"select f.*, abs(value - :feature_value:) diff from features f \"\n    + \" where f.feature = ? and f.fp_id = ? order by diff asc;\";\n    static query_get_scanned_coords = \"select count(*) as num_features, x, y from features where fp_id = ? \"\n    + \" group by x, y;\";\n    static query_get_min_sid = \"select min(s_id) from features where fp_id = ?\";\n    static query_get_scan_id = \"select value + 1 as value from settings where key = 'scan_id';\";\n    static query_update_scan_id = \"update settings set value = value + 1 where key = 'scan_id';\";\n\n    static creates = [\n        \"CREATE TABLE if not exists layout_images (id TEXT PRIMARY KEY, layout_image TEXT);\",\n        \"CREATE UNIQUE INDEX if not exists layout_images_id_uindex ON layout_images (id);\",\n\n        /**\n         * Create the settings table with default settings\n         */\n        \"create table if not exists settings (key TEXT PRIMARY KEY, value TEXT);\",\n        \"create unique index if not exists settings_key on settings (key);\",\n        \"insert or ignore into settings (key, value) values ('database_version', 0);\",\n        \"insert or ignore into settings (key, value) values ('database_code_version', 0);\",\n\n        /**\n         * ap_id = access point id\n         * fp_id = floorplan id\n         */\n        \"CREATE TABLE if not exists scan_results \" +\n        \"(s_id INTEGER, fp_id TEXT, ap_id TEXT, x INTEGER, \" +\n        \"y INTEGER, value REAL, orig_values TEXT, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, \" +\n        \"PRIMARY KEY (s_id, fp_id, ap_id), \" +\n        \"CONSTRAINT scan_results_layout_images_id_fk FOREIGN KEY (fp_id) REFERENCES layout_images (id));\",\n        \"create index if not exists x_and_y on scan_results (x, y);\",\n\n        \"CREATE TABLE if not exists kalman_estimates (fp_id TEXT, ap_id TEXT, x INTEGER, \"\n        + \"y INTEGER, kalman REAL, \"\n        + \"CONSTRAINT kalman_estimates_fp_id_ap_id_x_y_pk PRIMARY KEY (fp_id, ap_id, x, y),\"\n        + \"FOREIGN KEY (ap_id, fp_id, x, y) REFERENCES scan_results (ap_id, fp_id, x, y) ON DELETE CASCADE)\",\n\n        \"CREATE TABLE if not exists features (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, \"\n        + \" CONSTRAINT features_fp_id_x_y_feature_pk PRIMARY KEY (fp_id, x, y, feature));\",\n        \"CREATE UNIQUE INDEX if not exists features_feature_index1 ON features(fp_id,feature,x,y);\",\n        \"CREATE INDEX if not exists features_feature_index2 ON features(feature);\"\n    ];\n\n    static drops = [\n        \"drop table if exists layout_images;\",\n        \"drop table if exists settings;\",\n        \"drop table if exists scan_results;\",\n        \"drop table if exists kalman_estimates;\"\n    ];\n\n    static migration1 = [\n        \"ALTER TABLE layout_images ADD floor_plan_name TEXT NULL;\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration2 = [\n        \"ALTER TABLE features ADD s_id INT NULL;\",\n        \"DROP INDEX features_feature_index1;\",\n        \"DROP INDEX features_feature_index2;\",\n        \"CREATE TABLE featuresa8d1 (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, s_id INTEGER,\"\n        + \" CONSTRAINT features_fp_id_x_y_feature_s_id_pk PRIMARY KEY (fp_id, x, y, feature, s_id));\",\n        \"CREATE UNIQUE INDEX features_feature_index1 ON featuresa8d1 (fp_id, feature, x, y, s_id);\",\n        \"INSERT INTO featuresa8d1(fp_id, x, y, feature, value, s_id) SELECT fp_id, x, y, feature, value, s_id FROM features;\",\n        \"DROP TABLE features;\",\n        \"ALTER TABLE featuresa8d1 RENAME TO features;\",\n        \"CREATE INDEX features_feature_index2 ON features(feature);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration3 = [\n        \"insert or ignore into settings values ('scan_id', 64);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration4 = [\n        \"drop table features;\",\n        \"CREATE TABLE features (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, \"\n        + \" CONSTRAINT features_fp_id_x_y_feature_pk PRIMARY KEY (fp_id, x, y, feature));\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration5 = [\n        \"CREATE INDEX if not exists scan_results_fp_id_index ON scan_results (fp_id);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    constructor(log, database = \"db.sqlite3\"){\n        this.log = log;\n        this.log.debug(\"Db.constructor\");\n\n        this.db = new sqlite3.cached.Database(`db/${database}`);\n        this.db.serialize(() => {\n            this.db.exec(\"PRAGMA journal_mode = WAL;\");\n            this.db.exec(\"PRAGMA cache_size = 4096000;\");\n            this.db.exec(\"PRAGMA optimize;\");\n            this.db.exec(\"PRAGMA busy_timeout = 150000;\");\n        });\n        this.featuresCache = {};\n    }\n\n    clearFeaturesCache(fp_id){\n        this.featuresCache[fp_id] = undefined;\n    }\n\n    /**\n     *\n     * @param fp_id\n     */\n    createFeaturesCache(fp_id){\n        return new Promise((resolve, reject) => {\n\n            if(this.featuresCache[fp_id] !== undefined) {\n                resolve();\n                return;\n            }\n            this.db.all(\"select * from features where fp_id = ?;\", fp_id, (err, rows) => {\n                if (err) {\n                    reject();\n                    return;\n                }\n                const length = rows.length;\n                let fp_id, x, y, feature, value;\n                for (let i = 0; i < length; i++) {\n                    fp_id = rows[i].fp_id;\n                    x = rows[i].x;\n                    y = rows[i].y;\n                    feature = rows[i].feature;\n                    value = rows[i].value;\n                    if (this.featuresCache[fp_id] === undefined) {\n                        this.featuresCache[fp_id] = {};\n                    }\n                    let coord = x + \"_\" + y;\n                    if (this.featuresCache[fp_id][coord] === undefined) {\n                        this.featuresCache[fp_id][coord] = {};\n                    }\n\n                    this.featuresCache[fp_id][coord][feature] = value;\n                }\n                this.log.log(\"Features Cache created: \" + JSON.stringify(Object.keys(this.featuresCache)));\n                if (resolve) {\n                    resolve();\n                }\n            });\n        });\n    }\n\n    getFeaturesCache(fp_id){\n        if(this.featuresCache[fp_id] === undefined){\n            return false;\n        }\n        return this.featuresCache[fp_id];\n    }\n\n    getFeatureValue(fp_id, coord, feature){\n        if(this.featuresCache[fp_id] === undefined){\n            return false;\n        }\n        if(this.featuresCache[fp_id][coord] === undefined){\n            return false;\n        }\n        if(this.featuresCache[fp_id][coord][feature] === undefined){\n            return false;\n        }\n        return this.featuresCache[fp_id][coord][feature];\n    }\n\n    getFeatureNumber(fp_id, coord) {\n        let fp, c;\n        if(this.featuresCache[fp_id] === undefined){\n            return 1;\n        }\n        fp = this.featuresCache[fp_id];\n        if(fp[coord] === undefined){\n            return 1;\n        }\n        c = fp[coord];\n        const keys = Object.keys(c);\n        return keys.length;\n    }\n\n    getDatabase(){\n        return this.db;\n    }\n\n    doUpgrade(db, databaseCodeVersion, cb) {\n        this.log.debug(\"Db.doUpgrade\");\n\n        switch(databaseCodeVersion){\n            case 0:\n                db.serialize(() => {\n                    Db.migration1.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 1:\n                db.serialize(() => {\n                    Db.migration2.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 2:\n                db.serialize(() => {\n                    Db.migration3.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 3:\n                db.serialize(() => {\n                    Db.migration4.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 4:\n                db.serialize(() => {\n                    Db.migration5.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n        }\n    }\n\n    createTables(db, cb) {\n        this.log.debug(\"Db.createTables\");\n        let creates = Db.creates;\n\n        db.serialize(() => {\n            creates.forEach(function(create){\n                db.run(create);\n            });\n\n            let databaseCodeVersion = 0;\n\n            db.all(\"select * from settings\", (err, rows) => {\n                rows.forEach(function(row){\n                    switch(row.key){\n                        case \"database_code_version\":\n                            databaseCodeVersion = Number(row.value);\n                            break;\n                    }\n                });\n                if(databaseCodeVersion < Db.database_code_version){\n                    this.doUpgrade(db, databaseCodeVersion, cb);\n                }else{\n                    if(cb) {\n                        cb();\n                    }\n                }\n            });\n        });\n    }\n\n    getScannedCoords(fp_id, cb){\n        this.log.debug(\"Db.getScannedCoords\");\n        let db = this.db;\n        db.all(Db.query_get_scanned_coords, fp_id, cb);\n    }\n\n    getFloorPlans(cb) {\n        this.log.debug(\"Db.getFloorPlans\");\n        let db = this.db;\n        db.all(Db.query_get_all_floorplans, cb);\n    }\n\n    updateDatabase(data, cb) {\n        this.log.debug(\"Db.updateDatabase\");\n        let db = this.db;\n        let stmt = db.prepare(Db.query_insert_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        stmt = db.prepare(Db.query_update_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        if(typeof(data.layout_images) != \"undefined\" && data.layout_images.length > 0){\n            stmt = db.prepare(Db.query_insert_layout);\n            let upstmt = db.prepare(Db.query_update_layout);\n\n            data.layout_images.forEach(function(el){\n                let id = el.id;\n                let floor_plan_name = el.floorplanname;\n                let stringdata = JSON.stringify(el);\n                stmt.run(id, stringdata, floor_plan_name);\n                upstmt.run(stringdata, floor_plan_name, id);\n            });\n            stmt.finalize();\n            upstmt.finalize();\n        }\n\n        cb();\n    }\n\n    saveReadings(payload, cb){\n        let log = this.log;\n        let db = this.db;\n        log.debug(\"Db.saveReadings\");\n\n        let stmt = db.prepare(Db.query_insert_scan_results);\n        let finished = 0;\n        let xy = [];\n        payload.forEach((el) => {\n            db.get(Db.query_get_scan_id, (err, row) => {\n                db.run(Db.query_update_scan_id, () => {\n                    const s_id = Number(row.value);\n                    const fp_id = el.fp_id;\n                    const ap_id = el.ap_id;\n                    const x = Number(el.x);\n                    const y = Number(el.y);\n                    const key = x + \"_\" + y;\n                    if(xy.indexOf(key) === -1) {\n                        xy.push(key);\n                    }\n                    const value = Number(el.value);\n                    const orig_values = el.orig_values;\n                    const created = el.created;\n                    stmt.run(s_id, fp_id, ap_id, x, y, value, orig_values, created, (err) => {\n                        finished++;\n                        if (finished >= payload.length) {\n                            stmt.finalize();\n                            xy.forEach((coord, i) => {\n                                const call = i === (xy.length -1) ? cb : () => {};\n                                const [x, y] = coord.split(\"_\");\n                                this.updateKalman(fp_id, Number(x), Number(y), call);\n                            });\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    updateKalman(fp_id, x, y, cb){\n        let log = this.log;\n        let db = this.db;\n        let kalman = {};\n\n        db.all(Db.query_get_for_kalman, fp_id, x, y, (err, rows) => {\n            const insert = db.prepare(Db.query_insert_kalman_estimates);\n            const update = db.prepare(Db.query_update_kalman_estimates);\n\n            if (err) {\n                log.error(err);\n                return;\n            }\n\n            let done = 0;\n            rows.forEach((row) => {\n                let k = false;\n                if (kalman[row.fp_id + row.ap_id + row.x + row.y] === undefined) {\n                    kalman[row.fp_id + row.ap_id + row.x + row.y] = new KalmanFilter(row.cest);\n                }\n                k = kalman[row.fp_id + row.ap_id + row.x + row.y];\n\n                let values = row.values\n                    .split(\",\")\n                    .map((el) => { return Number(el); });\n\n                for(let i = 0; i < values.length; i++){\n                    k.addSample(values[i]);\n                }\n                insert.run(row.fp_id, row.ap_id, row.x, row.y, k.getEstimate(), () => {\n                    update.run(k.getEstimate(), row.fp_id, row.ap_id, row.x, row.y, () => {\n                        done++;\n                        if(done >= rows.length){\n                            this.log.log(\"Finished inserts and updates\");\n                            insert.finalize();\n                            update.finalize();\n                            db.serialize(() => {\n                                db.run(\"delete from features where fp_id = ? and x = ? and y = ?\", fp_id, row.x, row.y);\n                                db.run(Db.query_update_features, fp_id, fp_id, row.x, row.x, row.y, row.y, () => {\n                                    cb(fp_id);\n                                    this.log.log(\"Finished updating features\");\n                                });\n                            });\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    reindex(){\n        let db = this.db;\n        let log = this.log;\n        log.log(\"Starting Indexing\");\n        db.all(\"select fp_id, x, y from scan_results GROUP BY fp_id, x, y;\", (err, rows) => {\n            rows.forEach((row, i) => {\n                const fp_id = row.fp_id;\n                const x = row.x;\n                const y = row.y;\n                const call = i === (rows.length -1) ? () => {\n                    console.log(\"should close\");\n                    this.log.close();\n                    this.db.close();\n                } : () => {};\n                this.updateKalman(fp_id, x, y, call);\n            });\n        });\n    }\n}\n\n\nmodule.exports = Db;"]}