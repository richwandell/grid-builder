{"version":3,"sources":["../../src/server/Db.es6"],"names":["sqlite3","require","verbose","LinearInterpolate","linear","Db","log","database","debug","db","cached","Database","createTables","serialize","exec","featuresCache","fp_id","undefined","Promise","resolve","reject","all","err","rows","length","x","y","feature","value","maxX","maxY","i","coord","fp","c","keys","Object","databaseCodeVersion","cb","migration1","forEach","mig","run","migration2","migration3","migration4","migration5","migration6","creates","create","row","key","Number","database_code_version","doUpgrade","query_get_scanned_coords","query_get_all_floorplans","data","stmt","prepare","query_insert_version","databaseVersion","finalize","query_update_version","layout_images","query_insert_layout","upstmt","query_update_layout","el","id","floor_plan_name","floorplanname","stringdata","JSON","stringify","payload","query_insert_scan_results","finished","xy","get","query_get_scan_id","query_update_scan_id","s_id","ap_id","indexOf","push","orig_values","created","call","split","updateKalman","kalman","query_get_for_kalman","insert","query_insert_kalman_estimates","update","query_update_kalman_estimates","error","done","k","cest","values","map","addSample","getEstimate","query_update_features","console","close","interpolateX","then","interpolateY","query_insert_new_interpolated_feature","query_get_interpolate_count","maxFeatureCount","feature_count","query_get_interpolate_individual_feature","rowMap","iRow","xVal","xVals","yVals","unKnownVals","minVal","Math","min","maxVal","max","nowKnown","unknownY","yVal","unknownX","query_get_database_version","query_get_scan_results","query_update_oldest_features","query_get_features","query_get_min_sid","drops","module","exports"],"mappings":"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","file":"Db.js","sourcesContent":["import KalmanFilter from './KalmanFilter';\n\nlet sqlite3 = require('sqlite3').verbose();\nlet LinearInterpolate = require('everpolate').linear;\n\nclass Db {\n\n    static database_code_version = 6;\n    static query_get_all_floorplans = \"select * from layout_images\";\n    static query_get_database_version = \"select value from settings where key = 'database_version';\";\n    static query_insert_version = \"insert or ignore into settings values ('database_version', ?);\";\n    static query_update_version = \"update settings set value = ? where key = 'database_version';\";\n    static query_insert_layout = \"insert or ignore into layout_images values (?, ?, ?);\";\n    static query_update_layout = \"update layout_images set layout_image = ?, floor_plan_name = ? where id = ?;\";\n    static query_insert_scan_results = \"insert into scan_results values (?, ?, ?, ?, ?, ?, ?, ?);\";\n    static query_get_scan_results = \"select * from scan_results;\";\n    static query_get_for_kalman = \"SELECT s.fp_id, s.ap_id, s.x, s.y, \"\n    + \"group_concat(s.value) `values`, \"\n    + \"case when k.kalman is null then avg(s.value) else k.kalman end `cest`, \"\n    + \"k.kalman FROM scan_results s left join \"\n    + \"kalman_estimates k on s.fp_id = k.fp_id and s.ap_id = k.ap_id and s.x = k.x and s.y = k.y \"\n    + \" where s.fp_id = ? and s.value != 0 and s.x = ? and s.y = ? GROUP BY s.fp_id, s.ap_id, s.x, s.y;\";\n    static query_insert_kalman_estimates = \"insert or ignore into kalman_estimates values (?, ?, ?, ?, ?);\";\n    static query_update_kalman_estimates = \"update kalman_estimates set kalman = ? where fp_id = ? and ap_id = ? and \"\n    + \" x = ? and y = ?;\";\n    static query_update_features = \"insert into features \"\n    + \" select k.fp_id, k.x, k.y, k.ap_id || k1.ap_id as feature, abs(k.kalman - k1.kalman) as value \"\n    + \" from kalman_estimates k join kalman_estimates k1 on k.fp_id = k1.fp_id and k.x = k1.x and k.y = k1.y\"\n    + \" where value != 0 and k.fp_id = ? and k1.fp_id = ? and k.x = ? and k1.x = ? and k.y = ? and k1.y = ?\";\n    static query_update_oldest_features = \"select k.fp_id, k.x, k.y, k.ap_id || k1.ap_id as feature, \"\n    + \" abs(k.kalman - k1.kalman) as value, :scan_id: s_id from kalman_estimates k join \"\n    + \" kalman_estimates k1 on k.fp_id = k1.fp_id and k.x = k1.x and k.y = k1.y and k.ap_id < k1.ap_id where\"\n    + \" k.kalman != 0 and k1.kalman != 0 and k.fp_id = ? and k1.fp_id = ?;\";\n    static query_get_features = \"select f.*, abs(value - :feature_value:) diff from features f \"\n    + \" where f.feature = ? and f.fp_id = ? order by diff asc;\";\n    static query_get_scanned_coords = \"select count(*) as num_features, x, y from features where fp_id = ? \"\n    + \" group by x, y;\";\n    static query_get_min_sid = \"select min(s_id) from features where fp_id = ?\";\n    static query_get_scan_id = \"select value + 1 as value from settings where key = 'scan_id';\";\n    static query_update_scan_id = \"update settings set value = value + 1 where key = 'scan_id';\";\n\n    static creates = [\n        \"CREATE TABLE if not exists layout_images (id TEXT PRIMARY KEY, layout_image TEXT);\",\n        \"CREATE UNIQUE INDEX if not exists layout_images_id_uindex ON layout_images (id);\",\n\n        /**\n         * Create the settings table with default settings\n         */\n        \"create table if not exists settings (key TEXT PRIMARY KEY, value TEXT);\",\n        \"create unique index if not exists settings_key on settings (key);\",\n        \"insert or ignore into settings (key, value) values ('database_version', 0);\",\n        \"insert or ignore into settings (key, value) values ('database_code_version', 0);\",\n\n        /**\n         * ap_id = access point id\n         * fp_id = floorplan id\n         */\n        \"CREATE TABLE if not exists scan_results \" +\n        \"(s_id INTEGER, fp_id TEXT, ap_id TEXT, x INTEGER, \" +\n        \"y INTEGER, value REAL, orig_values TEXT, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, \" +\n        \"PRIMARY KEY (s_id, fp_id, ap_id), \" +\n        \"CONSTRAINT scan_results_layout_images_id_fk FOREIGN KEY (fp_id) REFERENCES layout_images (id));\",\n        \"create index if not exists x_and_y on scan_results (x, y);\",\n\n        \"CREATE TABLE if not exists kalman_estimates (fp_id TEXT, ap_id TEXT, x INTEGER, \"\n        + \"y INTEGER, kalman REAL, \"\n        + \"CONSTRAINT kalman_estimates_fp_id_ap_id_x_y_pk PRIMARY KEY (fp_id, ap_id, x, y),\"\n        + \"FOREIGN KEY (ap_id, fp_id, x, y) REFERENCES scan_results (ap_id, fp_id, x, y) ON DELETE CASCADE)\",\n\n        \"CREATE TABLE if not exists features (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, \"\n        + \" CONSTRAINT features_fp_id_x_y_feature_pk PRIMARY KEY (fp_id, x, y, feature));\",\n        \"CREATE UNIQUE INDEX if not exists features_feature_index1 ON features(fp_id,feature,x,y);\",\n        \"CREATE INDEX if not exists features_feature_index2 ON features(feature);\"\n    ];\n\n    static drops = [\n        \"drop table if exists layout_images;\",\n        \"drop table if exists settings;\",\n        \"drop table if exists scan_results;\",\n        \"drop table if exists kalman_estimates;\"\n    ];\n\n    static migration1 = [\n        \"ALTER TABLE layout_images ADD floor_plan_name TEXT NULL;\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration2 = [\n        \"ALTER TABLE features ADD s_id INT NULL;\",\n        \"DROP INDEX features_feature_index1;\",\n        \"DROP INDEX features_feature_index2;\",\n        \"CREATE TABLE featuresa8d1 (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, s_id INTEGER,\"\n        + \" CONSTRAINT features_fp_id_x_y_feature_s_id_pk PRIMARY KEY (fp_id, x, y, feature, s_id));\",\n        \"CREATE UNIQUE INDEX features_feature_index1 ON featuresa8d1 (fp_id, feature, x, y, s_id);\",\n        \"INSERT INTO featuresa8d1(fp_id, x, y, feature, value, s_id) SELECT fp_id, x, y, feature, value, s_id FROM features;\",\n        \"DROP TABLE features;\",\n        \"ALTER TABLE featuresa8d1 RENAME TO features;\",\n        \"CREATE INDEX features_feature_index2 ON features(feature);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration3 = [\n        \"insert or ignore into settings values ('scan_id', 64);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration4 = [\n        \"drop table features;\",\n        \"CREATE TABLE features (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, \"\n        + \" CONSTRAINT features_fp_id_x_y_feature_pk PRIMARY KEY (fp_id, x, y, feature));\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration5 = [\n        \"CREATE INDEX if not exists scan_results_fp_id_index ON scan_results (fp_id);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration6 = [\n        \"ALTER TABLE features ADD interpolated INTEGER DEFAULT 0 NOT NULL;\",\n        \"CREATE INDEX features_interpolated_index ON features (interpolated);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    constructor(log, database = \"db.sqlite3\"){\n        this.log = log;\n        this.log.debug(\"Db.constructor\");\n\n        this.db = new sqlite3.cached.Database(`db/${database}`);\n\n        this.createTables(this.db, () => {\n            this.db.serialize(() => {\n                this.db.exec(\"PRAGMA journal_mode = WAL;\");\n                this.db.exec(\"PRAGMA cache_size = 4096000;\");\n                this.db.exec(\"PRAGMA optimize;\");\n                this.db.exec(\"PRAGMA busy_timeout = 150000;\");\n            });\n        });\n        this.featuresCache = {};\n    }\n\n    clearFeaturesCache(fp_id){\n        this.featuresCache[fp_id] = undefined;\n    }\n\n    /**\n     *\n     * @param fp_id\n     */\n    createFeaturesCache(fp_id){\n        return new Promise((resolve, reject) => {\n\n            if(this.featuresCache[fp_id] !== undefined) {\n                resolve();\n                return;\n            }\n            this.db.all(\"select * from features where fp_id = ?;\", fp_id, (err, rows) => {\n                if (err) {\n                    reject();\n                    return;\n                }\n                const length = rows.length;\n                let fp_id, x, y, feature, value, maxX = 0, maxY = 0;\n                for (let i = 0; i < length; i++) {\n                    fp_id = rows[i].fp_id;\n                    x = rows[i].x;\n                    y = rows[i].y;\n                    if(x > maxX){\n                        maxX = x;\n                    }\n                    if(y > maxY) {\n                        maxY = y;\n                    }\n                    feature = rows[i].feature;\n                    value = rows[i].value;\n                    if (this.featuresCache[fp_id] === undefined) {\n                        this.featuresCache[fp_id] = {};\n                    }\n                    let coord = x + \"_\" + y;\n                    if (this.featuresCache[fp_id][coord] === undefined) {\n                        this.featuresCache[fp_id][coord] = {};\n                    }\n\n                    this.featuresCache[fp_id][coord][feature] = value;\n                }\n                this.featuresCache[fp_id][\"max_x\"] = maxX;\n                this.featuresCache[fp_id][\"max_y\"] = maxY;\n                this.log.log(\"Features Cache created\");\n                if (resolve) {\n                    resolve();\n                }\n            });\n        });\n    }\n\n    getFeaturesCache(fp_id){\n        if(this.featuresCache[fp_id] === undefined){\n            return false;\n        }\n        return this.featuresCache[fp_id];\n    }\n\n    getMaxX(fp_id) {\n        if(this.featuresCache[fp_id] === undefined){\n            return false;\n        }\n        return this.featuresCache[fp_id][\"max_x\"];\n    }\n\n    getMaxY(fp_id) {\n        if(this.featuresCache[fp_id] === undefined){\n            return false;\n        }\n        return this.featuresCache[fp_id][\"max_y\"];\n    }\n\n    getFeatureValue(fp_id, coord, feature){\n        if(this.featuresCache[fp_id] === undefined){\n            return false;\n        }\n        if(this.featuresCache[fp_id][coord] === undefined){\n            return false;\n        }\n        if(this.featuresCache[fp_id][coord][feature] === undefined){\n            return false;\n        }\n        return this.featuresCache[fp_id][coord][feature];\n    }\n\n    getFeatureNumber(fp_id, coord) {\n        let fp, c;\n        if(this.featuresCache[fp_id] === undefined){\n            return 1;\n        }\n        fp = this.featuresCache[fp_id];\n        if(fp[coord] === undefined){\n            return 1;\n        }\n        c = fp[coord];\n        const keys = Object.keys(c);\n        return keys.length;\n    }\n\n    getDatabase(){\n        return this.db;\n    }\n\n    doUpgrade(db, databaseCodeVersion, cb) {\n        this.log.debug(\"Db.doUpgrade\");\n\n        switch(databaseCodeVersion){\n            case 0:\n                db.serialize(() => {\n                    Db.migration1.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 1:\n                db.serialize(() => {\n                    Db.migration2.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 2:\n                db.serialize(() => {\n                    Db.migration3.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 3:\n                db.serialize(() => {\n                    Db.migration4.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 4:\n                db.serialize(() => {\n                    Db.migration5.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n            case 5:\n                db.serialize(() => {\n                    Db.migration6.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n        }\n    }\n\n    createTables(db, cb) {\n        this.log.debug(\"Db.createTables\");\n        let creates = Db.creates;\n\n        db.serialize(() => {\n            creates.forEach(function(create){\n                db.run(create);\n            });\n\n            let databaseCodeVersion = 0;\n\n            db.all(\"select * from settings\", (err, rows) => {\n                rows.forEach(function(row){\n                    switch(row.key){\n                        case \"database_code_version\":\n                            databaseCodeVersion = Number(row.value);\n                            break;\n                    }\n                });\n                if(databaseCodeVersion < Db.database_code_version){\n                    this.doUpgrade(db, databaseCodeVersion, cb);\n                }else{\n                    if(cb) {\n                        cb();\n                    }\n                }\n            });\n        });\n    }\n\n    getScannedCoords(fp_id, cb){\n        this.log.debug(\"Db.getScannedCoords\");\n        let db = this.db;\n        db.all(Db.query_get_scanned_coords, fp_id, cb);\n    }\n\n    getFloorPlans(cb) {\n        this.log.debug(\"Db.getFloorPlans\");\n        let db = this.db;\n        db.all(Db.query_get_all_floorplans, cb);\n    }\n\n    updateDatabase(data, cb) {\n        this.log.debug(\"Db.updateDatabase\");\n        let db = this.db;\n        let stmt = db.prepare(Db.query_insert_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        stmt = db.prepare(Db.query_update_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        if(typeof(data.layout_images) != \"undefined\" && data.layout_images.length > 0){\n            stmt = db.prepare(Db.query_insert_layout);\n            let upstmt = db.prepare(Db.query_update_layout);\n\n            data.layout_images.forEach(function(el){\n                let id = el.id;\n                let floor_plan_name = el.floorplanname;\n                let stringdata = JSON.stringify(el);\n                stmt.run(id, stringdata, floor_plan_name);\n                upstmt.run(stringdata, floor_plan_name, id);\n            });\n            stmt.finalize();\n            upstmt.finalize();\n        }\n\n        cb();\n    }\n\n    saveReadings(payload, cb){\n        let log = this.log;\n        let db = this.db;\n        log.debug(\"Db.saveReadings\");\n\n        let stmt = db.prepare(Db.query_insert_scan_results);\n        let finished = 0;\n        let xy = [];\n        payload.forEach((el) => {\n            db.get(Db.query_get_scan_id, (err, row) => {\n                db.run(Db.query_update_scan_id, () => {\n                    const s_id = Number(row.value);\n                    const fp_id = el.fp_id;\n                    const ap_id = el.ap_id;\n                    const x = Number(el.x);\n                    const y = Number(el.y);\n                    const key = x + \"_\" + y;\n                    if(xy.indexOf(key) === -1) {\n                        xy.push(key);\n                    }\n                    const value = Number(el.value);\n                    const orig_values = el.orig_values;\n                    const created = el.created;\n                    stmt.run(s_id, fp_id, ap_id, x, y, value, orig_values, created, (err) => {\n                        finished++;\n                        if (finished >= payload.length) {\n                            stmt.finalize();\n                            xy.forEach((coord, i) => {\n                                const call = i === (xy.length -1) ? cb : () => {};\n                                const [x, y] = coord.split(\"_\");\n                                this.updateKalman(fp_id, Number(x), Number(y), call);\n                            });\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    updateKalman(fp_id, x, y, cb){\n        let log = this.log;\n        let db = this.db;\n        let kalman = {};\n\n        db.all(Db.query_get_for_kalman, fp_id, x, y, (err, rows) => {\n            const insert = db.prepare(Db.query_insert_kalman_estimates);\n            const update = db.prepare(Db.query_update_kalman_estimates);\n\n            if (err) {\n                log.error(err);\n                return;\n            }\n\n            let done = 0;\n            rows.forEach((row) => {\n                let k = false;\n                if (kalman[row.fp_id + row.ap_id + row.x + row.y] === undefined) {\n                    kalman[row.fp_id + row.ap_id + row.x + row.y] = new KalmanFilter(row.cest);\n                }\n                k = kalman[row.fp_id + row.ap_id + row.x + row.y];\n\n                let values = row.values\n                    .split(\",\")\n                    .map((el) => { return Number(el); });\n\n                for(let i = 0; i < values.length; i++){\n                    k.addSample(values[i]);\n                }\n                insert.run(row.fp_id, row.ap_id, row.x, row.y, k.getEstimate(), () => {\n                    update.run(k.getEstimate(), row.fp_id, row.ap_id, row.x, row.y, () => {\n                        done++;\n                        if(done >= rows.length){\n                            this.log.log(\"Finished inserts and updates\");\n                            insert.finalize();\n                            update.finalize();\n                            db.serialize(() => {\n                                db.run(\"delete from features where fp_id = ? and x = ? and y = ?\", fp_id, row.x, row.y);\n                                db.run(Db.query_update_features, fp_id, fp_id, row.x, row.x, row.y, row.y, () => {\n                                    cb(fp_id);\n                                    this.log.log(\"Finished updating features\");\n                                });\n                            });\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    reindex(){\n        let db = this.db;\n        let log = this.log;\n        log.log(\"Starting Indexing\");\n        db.all(\"select fp_id, x, y from scan_results GROUP BY fp_id, x, y;\", (err, rows) => {\n            rows.forEach((row, i) => {\n                const fp_id = row.fp_id;\n                const x = row.x;\n                const y = row.y;\n                const call = i === (rows.length -1) ? () => {\n                    console.log(\"should close\");\n                    this.log.close();\n                    this.db.close();\n                } : () => {};\n                this.updateKalman(fp_id, x, y, call);\n            });\n        });\n    }\n\n    static query_get_interpolate_count = `\n    SELECT\n      f.feature, count(f.feature) as feature_count\n    from\n      features f\n      join layout_images li on f.fp_id = li.id\n    where\n      li.id = ?      \n    group by\n      f.feature\n    order by\n      feature_count desc\n    `;\n\n    static query_get_interpolate_individual_feature = `\n    select\n      *\n    from\n      features f\n    where\n      f.feature = ?\n      and fp_id = ?\n    order by\n      f.x asc, f.y asc;\n    `;\n\n    static query_insert_new_interpolated_feature = `\n    insert into features (fp_id, x, y, feature, value, interpolated)\n    values (?, ?, ?, ?, ?, 1);\n    `;\n\n    interpolate(fp_id: String) {\n        this.interpolateX(fp_id)\n            .then(() => this.interpolateY(fp_id));\n    }\n\n    interpolateX(fp_id: String) {\n        console.log(\"interpolateX\");\n        return new Promise((resolve, reject) => {\n            const insert = this.db.prepare(Db.query_insert_new_interpolated_feature);\n            this.db.run(\"delete from features where fp_id = ? and interpolated = 1;\", fp_id, () => {\n                this.db.all(Db.query_get_interpolate_count, fp_id, (err, rows) => {\n                    let maxFeatureCount = 0;\n                    for (let row of rows) {\n                        const feature = row.feature;\n                        const feature_count = row.feature_count;\n                        if (feature_count < maxFeatureCount) {\n                            break;\n                        }\n                        maxFeatureCount = feature_count;\n\n                        this.db.all(Db.query_get_interpolate_individual_feature, feature, fp_id, (err, rows) => {\n                            let rowMap = {};\n                            for (let iRow of rows) {\n                                if (typeof(rowMap[iRow.x]) === \"undefined\") {\n                                    rowMap[iRow.x] = [[], []];\n                                }\n\n                                rowMap[iRow.x][0].push(iRow.y);\n                                rowMap[iRow.x][1].push(iRow.value);\n                            }\n\n                            for (let xVal in rowMap) {\n                                let xVals = rowMap[xVal][0];\n                                let yVals = rowMap[xVal][1];\n                                let unKnownVals = [];\n                                let minVal = Math.min(...xVals);\n                                let maxVal = Math.max(...xVals);\n                                for (let i = minVal; i < maxVal; i++) {\n                                    if (xVals.indexOf(i) === -1) {\n                                        unKnownVals.push(i);\n                                    }\n                                }\n                                let nowKnown = LinearInterpolate(unKnownVals, xVals, yVals);\n                                let i = 0;\n                                let done = 0;\n                                for(let unknownY of unKnownVals) {\n                                    insert.run(fp_id, xVal, unknownY, feature, nowKnown[i], () => {\n                                        done++;\n                                        if(done === nowKnown.length){\n                                            resolve();\n                                        }\n                                    });\n                                    i++;\n                                }\n                            }\n                        });\n                    }\n                });\n            });\n        });\n    }\n\n    interpolateY(fp_id: String) {\n        console.log(\"interpolateY\");\n        return new Promise((resolve, reject) => {\n            const insert = this.db.prepare(Db.query_insert_new_interpolated_feature);\n            this.db.all(Db.query_get_interpolate_count, fp_id, (err, rows) => {\n                let maxFeatureCount = 0;\n                for (let row of rows) {\n                    const feature = row.feature;\n                    const feature_count = row.feature_count;\n                    if (feature_count < maxFeatureCount) {\n                        break;\n                    }\n                    maxFeatureCount = feature_count;\n\n                    this.db.all(Db.query_get_interpolate_individual_feature, feature, fp_id, (err, rows) => {\n                        let rowMap = {};\n                        for (let iRow of rows) {\n                            if (typeof(rowMap[iRow.y]) === \"undefined\") {\n                                rowMap[iRow.y] = [[], []];\n                            }\n\n                            rowMap[iRow.y][0].push(iRow.x);\n                            rowMap[iRow.y][1].push(iRow.value);\n                        }\n\n                        for (let yVal in rowMap) {\n                            let xVals = rowMap[yVal][0];\n                            let yVals = rowMap[yVal][1];\n\n                            let unKnownVals = [];\n                            let minVal = Math.min(...xVals);\n                            let maxVal = Math.max(...xVals);\n                            for (let i = minVal; i < maxVal; i++) {\n                                if (xVals.indexOf(i) === -1) {\n                                    unKnownVals.push(i);\n                                }\n                            }\n                            let nowKnown = LinearInterpolate(unKnownVals, xVals, yVals);\n                            let i = 0;\n                            let done = 0;\n                            for (let unknownX of unKnownVals) {\n                                insert.run(fp_id, unknownX, yVal, feature, nowKnown[i], () => {\n                                    done++;\n                                    if (done === nowKnown.length) {\n                                        resolve();\n                                    }\n                                });\n                                i++;\n                            }\n                        }\n                    });\n                }\n            });\n        });\n    }\n}\n\n\nmodule.exports = Db;"]}