{"version":3,"sources":["../../src/server/Db.es6"],"names":["sqlite3","require","verbose","Db","log","db","Database","configure","serialize","exec","debug","databaseCodeVersion","migration1","forEach","mig","run","createTables","migration2","migration3","migration4","creates","create","all","err","rows","row","key","Number","value","database_code_version","doUpgrade","fp_id","cb","query_get_scanned_coords","query_get_all_floorplans","query_get_database_version","data","stmt","prepare","query_insert_version","databaseVersion","finalize","query_update_version","layout_images","length","query_insert_layout","upstmt","query_update_layout","el","id","floor_plan_name","floorplanname","stringdata","JSON","stringify","payload","query_insert_scan_results","finished","get","query_get_scan_id","query_update_scan_id","s_id","ap_id","x","y","orig_values","created","updateKalman","kalman","query_get_for_kalman","insert","query_insert_kalman_estimates","update","query_update_kalman_estimates","error","done","k","cest","values","split","map","i","addSample","getEstimate","query_update_features","query_get_scan_results","query_update_oldest_features","query_get_features","query_get_min_sid","drops","module","exports"],"mappings":"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","file":"Db.js","sourcesContent":["import KalmanFilter from './KalmanFilter';\n\nlet sqlite3 = require('sqlite3').verbose();\n\nclass Db {\n\n    static database_code_version = 4;\n    static query_get_all_floorplans = \"select * from layout_images\";\n    static query_get_database_version = \"select value from settings where key = 'database_version';\";\n    static query_insert_version = \"insert or ignore into settings values ('database_version', ?);\";\n    static query_update_version = \"update settings set value = ? where key = 'database_version';\";\n    static query_insert_layout = \"insert or ignore into layout_images values (?, ?, ?);\";\n    static query_update_layout = \"update layout_images set layout_image = ?, floor_plan_name = ? where id = ?;\";\n    static query_insert_scan_results = \"insert into scan_results values (?, ?, ?, ?, ?, ?, ?, ?);\";\n    static query_get_scan_results = \"select * from scan_results;\";\n    static query_get_for_kalman = \"SELECT s.fp_id, s.ap_id, s.x, s.y, \"\n    + \"group_concat(s.value) `values`, \"\n    + \"case when k.kalman is null then avg(s.value) else k.kalman end `cest`, \"\n    + \"k.kalman FROM scan_results s left join \"\n    + \"kalman_estimates k on s.fp_id = k.fp_id and s.ap_id = k.ap_id and s.x = k.x and s.y = k.y \"\n    + \" where s.fp_id = ? GROUP BY s.fp_id, s.ap_id, s.x, s.y;\";\n    static query_insert_kalman_estimates = \"insert or ignore into kalman_estimates values (?, ?, ?, ?, ?);\";\n    static query_update_kalman_estimates = \"update kalman_estimates set kalman = ? where fp_id = ? and ap_id = ? and \"\n    + \" x = ? and y = ?;\";\n    static query_update_features = \"insert into features \"\n    + \" select k.fp_id, k.x, k.y, k.ap_id || k1.ap_id as feature, abs(k.kalman - k1.kalman) as value \"\n    + \" from kalman_estimates k join kalman_estimates k1 on k.fp_id = k1.fp_id and k.x = k1.x and k.y = k1.y\"\n    + \" where value != 0 and k.fp_id = ? and k1.fp_id = ?\";\n    static query_update_oldest_features = \"select k.fp_id, k.x, k.y, k.ap_id || k1.ap_id as feature, \"\n    + \" abs(k.kalman - k1.kalman) as value, :scan_id: s_id from kalman_estimates k join \"\n    + \" kalman_estimates k1 on k.fp_id = k1.fp_id and k.x = k1.x and k.y = k1.y and k.ap_id < k1.ap_id where\"\n    + \" k.kalman != 0 and k1.kalman != 0 and k.fp_id = ? and k1.fp_id = ?;\";\n    static query_get_features = \"select f.*, abs(value - :feature_value:) diff from features f \"\n    + \" where f.feature = ? and f.fp_id = ? order by diff asc;\";\n    static query_get_scanned_coords = \"select count(*) as num_features, x, y from features where fp_id = ? \"\n    + \" group by x, y;\";\n    static query_get_min_sid = \"select min(s_id) from features where fp_id = ?\";\n    static query_get_scan_id = \"select value + 1 as value from settings where key = 'scan_id';\";\n    static query_update_scan_id = \"update settings set value = value + 1 where key = 'scan_id';\";\n\n    static creates = [\n        \"CREATE TABLE if not exists layout_images (id TEXT PRIMARY KEY, layout_image TEXT);\",\n        \"CREATE UNIQUE INDEX if not exists layout_images_id_uindex ON layout_images (id);\",\n\n        /**\n         * Create the settings table with default settings\n         */\n        \"create table if not exists settings (key TEXT PRIMARY KEY, value TEXT);\",\n        \"create unique index if not exists settings_key on settings (key);\",\n        \"insert or ignore into settings (key, value) values ('database_version', 0);\",\n        \"insert or ignore into settings (key, value) values ('database_code_version', 0);\",\n\n        /**\n         * ap_id = access point id\n         * fp_id = floorplan id\n         */\n        \"CREATE TABLE if not exists scan_results \" +\n        \"(s_id INTEGER, fp_id TEXT, ap_id TEXT, x INTEGER, \" +\n        \"y INTEGER, value REAL, orig_values TEXT, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, \" +\n        \"PRIMARY KEY (s_id, fp_id, ap_id), \" +\n        \"CONSTRAINT scan_results_layout_images_id_fk FOREIGN KEY (fp_id) REFERENCES layout_images (id));\",\n        \"create index if not exists x_and_y on scan_results (x, y);\",\n\n        \"CREATE TABLE if not exists kalman_estimates (fp_id TEXT, ap_id TEXT, x INTEGER, \"\n        + \"y INTEGER, kalman REAL, \"\n        + \"CONSTRAINT kalman_estimates_fp_id_ap_id_x_y_pk PRIMARY KEY (fp_id, ap_id, x, y),\"\n        + \"FOREIGN KEY (ap_id, fp_id, x, y) REFERENCES scan_results (ap_id, fp_id, x, y) ON DELETE CASCADE)\",\n\n        \"CREATE TABLE if not exists features (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, \"\n        + \" CONSTRAINT features_fp_id_x_y_feature_pk PRIMARY KEY (fp_id, x, y, feature));\",\n        \"CREATE UNIQUE INDEX if not exists features_feature_index1 ON features(fp_id,feature,x,y);\",\n        \"CREATE INDEX if not exists features_feature_index2 ON features(feature);\"\n    ];\n\n    static drops = [\n        \"drop table if exists layout_images;\",\n        \"drop table if exists settings;\",\n        \"drop table if exists scan_results;\",\n        \"drop table if exists kalman_estimates;\"\n    ];\n\n    static migration1 = [\n        \"ALTER TABLE layout_images ADD floor_plan_name TEXT NULL;\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration2 = [\n        \"ALTER TABLE features ADD s_id INT NULL;\",\n        \"DROP INDEX features_feature_index1;\",\n        \"DROP INDEX features_feature_index2;\",\n        \"CREATE TABLE featuresa8d1 (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, s_id INTEGER,\"\n        + \" CONSTRAINT features_fp_id_x_y_feature_s_id_pk PRIMARY KEY (fp_id, x, y, feature, s_id));\",\n        \"CREATE UNIQUE INDEX features_feature_index1 ON featuresa8d1 (fp_id, feature, x, y, s_id);\",\n        \"INSERT INTO featuresa8d1(fp_id, x, y, feature, value, s_id) SELECT fp_id, x, y, feature, value, s_id FROM features;\",\n        \"DROP TABLE features;\",\n        \"ALTER TABLE featuresa8d1 RENAME TO features;\",\n        \"CREATE INDEX features_feature_index2 ON features(feature);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration3 = [\n        \"insert or ignore into settings values ('scan_id', 64);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration4 = [\n        \"drop table features;\",\n        \"CREATE TABLE features (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, \"\n        + \" CONSTRAINT features_fp_id_x_y_feature_pk PRIMARY KEY (fp_id, x, y, feature));\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    constructor(log){\n        this.log = log;\n        this.db = new sqlite3.Database('db/db.sqlite3');\n        this.db.configure('busyTimeout', 15000);\n        this.db.serialize(() => {\n            this.db.exec(\"PRAGMA journal_mode = WAL;\");\n            this.db.exec(\"PRAGMA cache_size = 4096000;\");\n            this.db.exec(\"PRAGMA optimize;\");\n        });\n        this.log.debug(\"Db.constructor\");\n    }\n\n    getDatabase(){\n        return this.db;\n    }\n\n    doUpgrade(databaseCodeVersion) {\n        this.log.debug(\"Db.doUpgrade\");\n        let db = this.db;\n        switch(databaseCodeVersion){\n            case 0:\n                db.serialize(() => {\n                    Db.migration1.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables();\n                });\n                break;\n\n            case 1:\n                db.serialize(() => {\n                    Db.migration2.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables();\n                });\n                break;\n\n            case 2:\n                db.serialize(() => {\n                    Db.migration3.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables();\n                });\n                break;\n\n            case 3:\n                db.serialize(() => {\n                    Db.migration4.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables();\n                });\n                break;\n        }\n    }\n\n    /**\n     * Creates the sqlite tables\n     */\n    createTables() {\n        this.log.debug(\"Db.createTables\");\n        let creates = Db.creates;\n        let db = this.db;\n\n        db.serialize(() => {\n            creates.forEach(function(create){\n                db.run(create);\n            });\n\n            let databaseCodeVersion = 0;\n\n            db.all(\"select * from settings\", (err, rows) => {\n                rows.forEach(function(row){\n                    switch(row.key){\n                        case \"database_code_version\":\n                            databaseCodeVersion = Number(row.value);\n                            break;\n                    }\n                });\n                if(databaseCodeVersion < Db.database_code_version){\n                    this.doUpgrade(databaseCodeVersion);\n                }\n            });\n        });\n    }\n\n    getScannedCoords(fp_id, cb){\n        this.log.debug(\"Db.getScannedCoords\");\n        let db = this.db;\n        db.all(Db.query_get_scanned_coords, fp_id, cb);\n    }\n\n    getFloorPlans(cb) {\n        this.log.debug(\"Db.getFloorPlans\");\n        let db = this.db;\n        db.all(Db.query_get_all_floorplans, cb);\n    }\n\n    getDatabaseVersion(cb) {\n        this.log.debug(\"Db.getDatabaseVersion\");\n        let db = this.db;\n        db.all(Db.query_get_database_version, cb);\n    }\n\n    updateDatabase(data, cb) {\n        this.log.debug(\"Db.updateDatabase\");\n        let db = this.db;\n        let stmt = db.prepare(Db.query_insert_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        stmt = db.prepare(Db.query_update_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        if(typeof(data.layout_images) != \"undefined\" && data.layout_images.length > 0){\n            stmt = db.prepare(Db.query_insert_layout);\n            let upstmt = db.prepare(Db.query_update_layout);\n\n            data.layout_images.forEach(function(el){\n                let id = el.id;\n                let floor_plan_name = el.floorplanname;\n                let stringdata = JSON.stringify(el);\n                stmt.run(id, stringdata, floor_plan_name);\n                upstmt.run(stringdata, floor_plan_name, id);\n            });\n            stmt.finalize();\n            upstmt.finalize();\n        }\n\n        cb();\n    }\n\n    saveReadings(payload, cb){\n        let log = this.log;\n        let db = this.db;\n        log.debug(\"Db.saveReadings\");\n\n        let stmt = db.prepare(Db.query_insert_scan_results);\n        let finished = 0;\n        db.get(Db.query_get_scan_id, (err, row) => {\n            db.run(Db.query_update_scan_id);\n            payload.forEach((el) => {\n                let s_id = Number(row.value);\n                let fp_id = el.fp_id;\n                let ap_id = el.ap_id;\n                let x = Number(el.x);\n                let y = Number(el.y);\n                let value = Number(el.value);\n                let orig_values = el.orig_values;\n                let created = el.created;\n                stmt.run(s_id, fp_id, ap_id, x, y, value, orig_values, created, (err) => {\n                    finished++;\n                    if(finished >= payload.length){\n                        stmt.finalize();\n                        this.updateKalman(fp_id, cb);\n                    }\n                });\n            });\n        });\n    }\n\n    updateKalman(fp_id, cb){\n        let log = this.log;\n        let db = this.db;\n        let kalman = {};\n\n        db.all(Db.query_get_for_kalman, fp_id, (err, rows) => {\n            const insert = db.prepare(Db.query_insert_kalman_estimates);\n            const update = db.prepare(Db.query_update_kalman_estimates);\n\n            if(err) {\n                log.error(err);\n                return;\n            }\n\n            let done = 0;\n            rows.forEach((row) => {\n                let k = false;\n                if (typeof(kalman[row.fp_id + row.ap_id + row.x + row.y]) == \"undefined\") {\n                    kalman[row.fp_id + row.ap_id + row.x + row.y] = new KalmanFilter(row.cest);\n                }\n                k = kalman[row.fp_id + row.ap_id + row.x + row.y];\n\n                let values = row.values\n                    .split(\",\")\n                    .map((el) => { return Number(el); });\n\n                for(let i = 0; i < values.length; i++){\n                    k.addSample(values[i]);\n                }\n                insert.run(row.fp_id, row.ap_id, row.x, row.y, k.getEstimate(), () => {\n                    update.run(k.getEstimate(), row.fp_id, row.ap_id, row.x, row.y, () => {\n                        done++;\n                        if(done >= rows.length){\n                            insert.finalize();\n                            update.finalize();\n                            db.serialize(() => {\n                                db.run(\"delete from features where fp_id = ?\", fp_id);\n                                db.run(Db.query_update_features, fp_id, fp_id, () => {\n                                    cb();\n                                });\n                            });\n                        }\n                    });\n                });\n            });\n        });\n    }\n}\n\n\nmodule.exports = Db;"]}