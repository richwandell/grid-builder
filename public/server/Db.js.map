{"version":3,"sources":["../../src/server/Db.es6"],"names":["sqlite3","require","verbose","Db","log","debug","db","cached","Database","serialize","exec","featuresCachePromise","Promise","resolve","reject","createTables","createFeaturesCache","id","cb","get","query_get_particles","err","row","particles","undefined","JSON","parse","p","stringify","run","query_insert_particles","query_update_particles","featuresCache","all","rows","length","fp_id","x","y","feature","value","i","coord","Object","keys","databaseCodeVersion","migration1","forEach","mig","migration2","migration3","migration4","creates","create","key","Number","database_code_version","doUpgrade","query_get_scanned_coords","query_get_all_floorplans","data","stmt","prepare","query_insert_version","databaseVersion","finalize","query_update_version","layout_images","query_insert_layout","upstmt","query_update_layout","el","floor_plan_name","floorplanname","stringdata","payload","query_insert_scan_results","finished","query_get_scan_id","query_update_scan_id","s_id","ap_id","orig_values","created","updateKalman","kalman","query_get_for_kalman","insert","query_insert_kalman_estimates","update","query_update_kalman_estimates","error","done","k","cest","values","split","map","addSample","getEstimate","query_update_features","query_get_database_version","query_get_scan_results","query_update_oldest_features","query_get_features","query_get_min_sid","query_get_max_min_particles","drops","module","exports"],"mappings":"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","file":"Db.js","sourcesContent":["import KalmanFilter from './KalmanFilter';\n\nlet sqlite3 = require('sqlite3').verbose();\n\nclass Db {\n\n    static database_code_version = 4;\n    static query_get_all_floorplans = \"select * from layout_images\";\n    static query_get_database_version = \"select value from settings where key = 'database_version';\";\n    static query_insert_version = \"insert or ignore into settings values ('database_version', ?);\";\n    static query_update_version = \"update settings set value = ? where key = 'database_version';\";\n    static query_insert_layout = \"insert or ignore into layout_images values (?, ?, ?);\";\n    static query_update_layout = \"update layout_images set layout_image = ?, floor_plan_name = ? where id = ?;\";\n    static query_insert_scan_results = \"insert into scan_results values (?, ?, ?, ?, ?, ?, ?, ?);\";\n    static query_get_scan_results = \"select * from scan_results;\";\n    static query_get_for_kalman = \"SELECT s.fp_id, s.ap_id, s.x, s.y, \"\n    + \"group_concat(s.value) `values`, \"\n    + \"case when k.kalman is null then avg(s.value) else k.kalman end `cest`, \"\n    + \"k.kalman FROM scan_results s left join \"\n    + \"kalman_estimates k on s.fp_id = k.fp_id and s.ap_id = k.ap_id and s.x = k.x and s.y = k.y \"\n    + \" where s.fp_id = ? GROUP BY s.fp_id, s.ap_id, s.x, s.y;\";\n    static query_insert_kalman_estimates = \"insert or ignore into kalman_estimates values (?, ?, ?, ?, ?);\";\n    static query_update_kalman_estimates = \"update kalman_estimates set kalman = ? where fp_id = ? and ap_id = ? and \"\n    + \" x = ? and y = ?;\";\n    static query_update_features = \"insert into features \"\n    + \" select k.fp_id, k.x, k.y, k.ap_id || k1.ap_id as feature, abs(k.kalman - k1.kalman) as value \"\n    + \" from kalman_estimates k join kalman_estimates k1 on k.fp_id = k1.fp_id and k.x = k1.x and k.y = k1.y\"\n    + \" where value != 0 and k.fp_id = ? and k1.fp_id = ?\";\n    static query_update_oldest_features = \"select k.fp_id, k.x, k.y, k.ap_id || k1.ap_id as feature, \"\n    + \" abs(k.kalman - k1.kalman) as value, :scan_id: s_id from kalman_estimates k join \"\n    + \" kalman_estimates k1 on k.fp_id = k1.fp_id and k.x = k1.x and k.y = k1.y and k.ap_id < k1.ap_id where\"\n    + \" k.kalman != 0 and k1.kalman != 0 and k.fp_id = ? and k1.fp_id = ?;\";\n    static query_get_features = \"select f.*, abs(value - :feature_value:) diff from features f \"\n    + \" where f.feature = ? and f.fp_id = ? order by diff asc;\";\n    static query_get_scanned_coords = \"select count(*) as num_features, x, y from features where fp_id = ? \"\n    + \" group by x, y;\";\n    static query_get_min_sid = \"select min(s_id) from features where fp_id = ?\";\n    static query_get_scan_id = \"select value + 1 as value from settings where key = 'scan_id';\";\n    static query_update_scan_id = \"update settings set value = value + 1 where key = 'scan_id';\";\n    static query_get_max_min_particles = \"select min(x), max(x), min(y), max(y) from features where fp_id = ?;\";\n    static query_get_particles = \"select particles from particles where id = ?\";\n    static query_insert_particles = \"insert or ignore into particles values (?, ?);\";\n    static query_update_particles = \"update particles set particles = ? where id = ?\";\n\n    static creates = [\n        \"CREATE TABLE if not exists layout_images (id TEXT PRIMARY KEY, layout_image TEXT);\",\n        \"CREATE UNIQUE INDEX if not exists layout_images_id_uindex ON layout_images (id);\",\n\n        /**\n         * Create the settings table with default settings\n         */\n        \"create table if not exists settings (key TEXT PRIMARY KEY, value TEXT);\",\n        \"create unique index if not exists settings_key on settings (key);\",\n        \"insert or ignore into settings (key, value) values ('database_version', 0);\",\n        \"insert or ignore into settings (key, value) values ('database_code_version', 0);\",\n\n        /**\n         * ap_id = access point id\n         * fp_id = floorplan id\n         */\n        \"CREATE TABLE if not exists scan_results \" +\n        \"(s_id INTEGER, fp_id TEXT, ap_id TEXT, x INTEGER, \" +\n        \"y INTEGER, value REAL, orig_values TEXT, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, \" +\n        \"PRIMARY KEY (s_id, fp_id, ap_id), \" +\n        \"CONSTRAINT scan_results_layout_images_id_fk FOREIGN KEY (fp_id) REFERENCES layout_images (id));\",\n        \"create index if not exists x_and_y on scan_results (x, y);\",\n\n        \"CREATE TABLE if not exists kalman_estimates (fp_id TEXT, ap_id TEXT, x INTEGER, \"\n        + \"y INTEGER, kalman REAL, \"\n        + \"CONSTRAINT kalman_estimates_fp_id_ap_id_x_y_pk PRIMARY KEY (fp_id, ap_id, x, y),\"\n        + \"FOREIGN KEY (ap_id, fp_id, x, y) REFERENCES scan_results (ap_id, fp_id, x, y) ON DELETE CASCADE)\",\n\n        \"CREATE TABLE if not exists features (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, \"\n        + \" CONSTRAINT features_fp_id_x_y_feature_pk PRIMARY KEY (fp_id, x, y, feature));\",\n        \"CREATE UNIQUE INDEX if not exists features_feature_index1 ON features(fp_id,feature,x,y);\",\n        \"CREATE INDEX if not exists features_feature_index2 ON features(feature);\",\n        \"CREATE TABLE if not exists particles (id INT PRIMARY KEY NOT NULL, particles TEXT);\",\n        \"CREATE UNIQUE INDEX if not exists particles_id_uindex ON particles (id);\"\n    ];\n\n    static drops = [\n        \"drop table if exists layout_images;\",\n        \"drop table if exists settings;\",\n        \"drop table if exists scan_results;\",\n        \"drop table if exists kalman_estimates;\"\n    ];\n\n    static migration1 = [\n        \"ALTER TABLE layout_images ADD floor_plan_name TEXT NULL;\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration2 = [\n        \"ALTER TABLE features ADD s_id INT NULL;\",\n        \"DROP INDEX features_feature_index1;\",\n        \"DROP INDEX features_feature_index2;\",\n        \"CREATE TABLE featuresa8d1 (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, s_id INTEGER,\"\n        + \" CONSTRAINT features_fp_id_x_y_feature_s_id_pk PRIMARY KEY (fp_id, x, y, feature, s_id));\",\n        \"CREATE UNIQUE INDEX features_feature_index1 ON featuresa8d1 (fp_id, feature, x, y, s_id);\",\n        \"INSERT INTO featuresa8d1(fp_id, x, y, feature, value, s_id) SELECT fp_id, x, y, feature, value, s_id FROM features;\",\n        \"DROP TABLE features;\",\n        \"ALTER TABLE featuresa8d1 RENAME TO features;\",\n        \"CREATE INDEX features_feature_index2 ON features(feature);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration3 = [\n        \"insert or ignore into settings values ('scan_id', 64);\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    static migration4 = [\n        \"drop table features;\",\n        \"CREATE TABLE features (fp_id TEXT, x INTEGER, y INTEGER, feature TEXT, value REAL, \"\n        + \" CONSTRAINT features_fp_id_x_y_feature_pk PRIMARY KEY (fp_id, x, y, feature));\",\n        \"update settings set value = '\" + Db.database_code_version + \"' where key = 'database_code_version';\"\n    ];\n\n    constructor(log){\n        this.log = log;\n        this.log.debug(\"Db.constructor\");\n\n        this.db = new sqlite3.cached.Database('db/db.sqlite3');\n        this.db.serialize(() => {\n            this.db.exec(\"PRAGMA journal_mode = WAL;\");\n            this.db.exec(\"PRAGMA cache_size = 4096000;\");\n            this.db.exec(\"PRAGMA optimize;\");\n            this.db.exec(\"PRAGMA busy_timeout = 150000;\");\n        });\n        this.featuresCachePromise = new Promise((resolve, reject) => {\n            this.createTables(this.db, () => {\n                this.createFeaturesCache(resolve, reject);\n            });\n        });\n    }\n\n    getStateParticles(id, cb){\n        let db = this.db;\n        db.get(Db.query_get_particles, id, (err, row) => {\n            let particles = [];\n            if(row !== undefined && row.particles !== null){\n                particles = JSON.parse(row.particles);\n            }\n\n            cb(particles);\n        });\n    }\n\n    setStateParticles(id, particles){\n        let db = this.db;\n        let p = JSON.stringify(particles);\n        db.serialize(() => {\n            db.run(Db.query_insert_particles, id, p);\n            db.run(Db.query_update_particles, id, p);\n        });\n    }\n\n    createFeaturesCache(resolve, reject){\n        this.featuresCache = {};\n        this.db.all(\"select * from features;\", (err, rows) => {\n            if(err){\n                reject();\n                return;\n            }\n            const length = rows.length;\n            let fp_id, x, y, feature, value;\n            for(let i = 0; i < length; i++){\n                fp_id = rows[i].fp_id;\n                x = rows[i].x;\n                y = rows[i].y;\n                feature = rows[i].feature;\n                value = rows[i].value;\n                if(typeof(this.featuresCache[fp_id]) == \"undefined\"){\n                    this.featuresCache[fp_id] = {};\n                }\n                let coord = x + \"_\" + y;\n                if(typeof(this.featuresCache[fp_id][coord]) == \"undefined\") {\n                    this.featuresCache[fp_id][coord] = {};\n                }\n\n                this.featuresCache[fp_id][coord][feature] = value;\n            }\n            this.log.log(\"Features Cache created: \" + JSON.stringify(Object.keys(this.featuresCache)));\n            resolve();\n        });\n    }\n\n    getFeaturesCache(fp_id){\n        if(this.featuresCache[fp_id] === undefined){\n            return false;\n        }\n        return this.featuresCache[fp_id];\n    }\n\n    getFeatureValue(fp_id, coord, feature){\n        if(this.featuresCache[fp_id] === undefined){\n            return false;\n        }\n        if(this.featuresCache[fp_id][coord] === undefined){\n            return false;\n        }\n        if(this.featuresCache[fp_id][coord][feature] === undefined){\n            return false;\n        }\n        return this.featuresCache[fp_id][coord][feature];\n    }\n\n    getDatabase(){\n        return this.db;\n    }\n\n    doUpgrade(db, databaseCodeVersion, cb) {\n        this.log.debug(\"Db.doUpgrade\");\n\n        switch(databaseCodeVersion){\n            case 0:\n                db.serialize(() => {\n                    Db.migration1.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 1:\n                db.serialize(() => {\n                    Db.migration2.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 2:\n                db.serialize(() => {\n                    Db.migration3.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n\n            case 3:\n                db.serialize(() => {\n                    Db.migration4.forEach((mig) => {\n                        db.run(mig);\n                    });\n                    this.createTables(db, cb);\n                });\n                break;\n        }\n    }\n\n    createTables(db, cb) {\n        this.log.debug(\"Db.createTables\");\n        let creates = Db.creates;\n\n        db.serialize(() => {\n            creates.forEach(function(create){\n                db.run(create);\n            });\n\n            let databaseCodeVersion = 0;\n\n            db.all(\"select * from settings\", (err, rows) => {\n                rows.forEach(function(row){\n                    switch(row.key){\n                        case \"database_code_version\":\n                            databaseCodeVersion = Number(row.value);\n                            break;\n                    }\n                });\n                if(databaseCodeVersion < Db.database_code_version){\n                    this.doUpgrade(db, databaseCodeVersion, cb);\n                }else{\n                    cb();\n                }\n            });\n        });\n    }\n\n    getScannedCoords(fp_id, cb){\n        this.log.debug(\"Db.getScannedCoords\");\n        let db = this.db;\n        db.all(Db.query_get_scanned_coords, fp_id, cb);\n    }\n\n    getFloorPlans(cb) {\n        this.log.debug(\"Db.getFloorPlans\");\n        let db = this.db;\n        db.all(Db.query_get_all_floorplans, cb);\n    }\n\n    updateDatabase(data, cb) {\n        this.log.debug(\"Db.updateDatabase\");\n        let db = this.db;\n        let stmt = db.prepare(Db.query_insert_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        stmt = db.prepare(Db.query_update_version);\n        stmt.run(data.databaseVersion);\n        stmt.finalize();\n\n        if(typeof(data.layout_images) != \"undefined\" && data.layout_images.length > 0){\n            stmt = db.prepare(Db.query_insert_layout);\n            let upstmt = db.prepare(Db.query_update_layout);\n\n            data.layout_images.forEach(function(el){\n                let id = el.id;\n                let floor_plan_name = el.floorplanname;\n                let stringdata = JSON.stringify(el);\n                stmt.run(id, stringdata, floor_plan_name);\n                upstmt.run(stringdata, floor_plan_name, id);\n            });\n            stmt.finalize();\n            upstmt.finalize();\n        }\n\n        cb();\n    }\n\n    saveReadings(payload, cb){\n        let log = this.log;\n        let db = this.db;\n        log.debug(\"Db.saveReadings\");\n\n        let stmt = db.prepare(Db.query_insert_scan_results);\n        let finished = 0;\n        db.get(Db.query_get_scan_id, (err, row) => {\n            db.run(Db.query_update_scan_id);\n            payload.forEach((el) => {\n                let s_id = Number(row.value);\n                let fp_id = el.fp_id;\n                let ap_id = el.ap_id;\n                let x = Number(el.x);\n                let y = Number(el.y);\n                let value = Number(el.value);\n                let orig_values = el.orig_values;\n                let created = el.created;\n                stmt.run(s_id, fp_id, ap_id, x, y, value, orig_values, created, (err) => {\n                    finished++;\n                    if(finished >= payload.length){\n                        stmt.finalize();\n                        this.updateKalman(fp_id, cb);\n                    }\n                });\n            });\n        });\n    }\n\n    updateKalman(fp_id, cb){\n        let log = this.log;\n        let db = this.db;\n        let kalman = {};\n\n        db.all(Db.query_get_for_kalman, fp_id, (err, rows) => {\n            const insert = db.prepare(Db.query_insert_kalman_estimates);\n            const update = db.prepare(Db.query_update_kalman_estimates);\n\n            if(err) {\n                log.error(err);\n                return;\n            }\n\n            let done = 0;\n            rows.forEach((row) => {\n                let k = false;\n                if (kalman[row.fp_id + row.ap_id + row.x + row.y] === undefined) {\n                    kalman[row.fp_id + row.ap_id + row.x + row.y] = new KalmanFilter(row.cest);\n                }\n                k = kalman[row.fp_id + row.ap_id + row.x + row.y];\n\n                let values = row.values\n                    .split(\",\")\n                    .map((el) => { return Number(el); });\n\n                for(let i = 0; i < values.length; i++){\n                    k.addSample(values[i]);\n                }\n                insert.run(row.fp_id, row.ap_id, row.x, row.y, k.getEstimate(), () => {\n                    update.run(k.getEstimate(), row.fp_id, row.ap_id, row.x, row.y, () => {\n                        done++;\n                        if(done >= rows.length){\n                            insert.finalize();\n                            update.finalize();\n                            db.serialize(() => {\n                                db.run(\"delete from features where fp_id = ?\", fp_id);\n                                db.run(Db.query_update_features, fp_id, fp_id, () => {\n                                    cb();\n                                });\n                            });\n                        }\n                    });\n                });\n            });\n        });\n    }\n}\n\n\nmodule.exports = Db;"]}