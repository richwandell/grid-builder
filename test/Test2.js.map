{"version":3,"sources":["Test2.es6"],"names":["fs","require","Test2","log","debug","database","rows","JSON","parse","readFileSync","knn","getNeighbors","cc","out","succes","clusters","centroids","console","largest","forEach","cl","length","best","Infinity","bestCluster","totalDist","i"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;;;AACA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;;IAEMC,K,GACF,iBAAa;AAAA;;AACT;AACA,QAAMC,MAAM,EAACC,OAAO,iBAAM,CAAE,CAAhB,EAAkBD,KAAK,eAAM,CAAE,CAA/B,EAAZ;AACA,QAAIE,WAAW,iBAAOF,GAAP,CAAf;;AAEA,QAAIG,OAAOC,KAAKC,KAAL,CAAWR,GAAGS,YAAH,CAAgB,kBAAhB,EAAoC,MAApC,CAAX,CAAX;;AAEA,QAAIC,MAAM,kBAAQP,GAAR,EAAaE,QAAb,EAAuB,kCAAvB,EAA2DC,IAA3D,CAAV;AACAI,QAAIC,YAAJ,CAAiB,CAAjB,EAAoB,UAACD,GAAD,EAAS;AACzB,YAAIE,KAAK,qBAAW,CAAX,EAAcF,GAAd,CAAT;AACA,YAAIG,MAAM;AACNC,oBAAQ,IADF;AAENJ,iBAAKA,GAFC;AAGNK,sBAAUH,GAAG,CAAH,CAHJ;AAINI,uBAAWJ,GAAG,CAAH;AAJL,SAAV;;AAOAK,gBAAQd,GAAR,CAAYU,IAAIH,GAAhB;AACAO,gBAAQd,GAAR,CAAY,IAAZ;AACAc,gBAAQd,GAAR,CAAYU,IAAIE,QAAhB;AACAE,gBAAQd,GAAR,CAAY,IAAZ;AACAc,gBAAQd,GAAR,CAAYU,IAAIG,SAAhB;;AAGA,YAAIE,UAAU,CAAd;;AAEAL,YAAIE,QAAJ,CAAaI,OAAb,CAAqB,UAASC,EAAT,EAAa;AAC9B,gBAAGA,GAAGC,MAAH,GAAYH,OAAf,EAAuB;AACnBA,0BAAUE,GAAGC,MAAb;AACH;AACJ,SAJD;AAKA,YAAIC,OAAOC,QAAX;AACA,YAAIC,oBAAJ;AACAX,YAAIE,QAAJ,CAAaI,OAAb,CAAqB,UAASC,EAAT,EAAY;AAC7B,gBAAGA,GAAGC,MAAH,IAAaH,OAAhB,EAAyB;AACrB,oBAAIO,YAAY,CAAhB;AACAL,mBAAGD,OAAH,CAAW,UAAUO,CAAV,EAAa;AACpBD,iCAAaC,EAAE,CAAF,CAAb;AACH,iBAFD;AAGA,oBAAID,YAAYH,IAAhB,EAAsB;AAClBA,2BAAOG,SAAP;AACAD,kCAAcJ,EAAd;AACH;AACJ;AACJ,SAXD;AAYAH,gBAAQd,GAAR,CAAYqB,WAAZ;AACH,KAtCD;AAuCH,C;;AAGL,IAAItB,KAAJ","file":"Test2.js","sourcesContent":["import Db from '../src/server/Db';\nimport Knn from '../src/server/Knn';\nimport KMeans from '../src/server/KMeans';\nconst fs = require('fs');\n\nclass Test2{\n    constructor(){\n        debugger;\n        const log = {debug: () => {}, log: () => {}};\n        let database = new Db(log);\n\n        let rows = JSON.parse(fs.readFileSync(\"./test/0-18.json\", \"utf8\"));\n\n        let knn = new Knn(log, database, '336c6582c283421c28479e8801e8edfa', rows);\n        knn.getNeighbors(5, (knn) => {\n            let cc = new KMeans(2, knn);\n            let out = {\n                succes: true,\n                knn: knn,\n                clusters: cc[0],\n                centroids: cc[1]\n            };\n\n            console.log(out.knn);\n            console.log(\"\\n\");\n            console.log(out.clusters)\n            console.log(\"\\n\");\n            console.log(out.centroids);\n\n\n            let largest = 0;\n\n            out.clusters.forEach(function(cl) {\n                if(cl.length > largest){\n                    largest = cl.length;\n                }\n            });\n            let best = Infinity;\n            let bestCluster;\n            out.clusters.forEach(function(cl){\n                if(cl.length == largest) {\n                    let totalDist = 0;\n                    cl.forEach(function (i) {\n                        totalDist += i[2]\n                    });\n                    if (totalDist < best) {\n                        best = totalDist;\n                        bestCluster = cl;\n                    }\n                }\n            });\n            console.log(bestCluster);\n        });\n    }\n}\n\nnew Test2();"]}