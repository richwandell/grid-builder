{"version":3,"sources":["Test.es6"],"names":["fs","require","Test","database","debug","db","getDatabase","rows","readFileSync","split","features","fp_id","forEach","row","row1","Math","abs","Number","start","Date","getTime","data","keys","Object","done","key","all","query_get_features","replace","err","push","length","close","makeGuess","distances","knn","feature","coord","x","y","pow","diff","x_y","distance","sqrt","reduce","a","b","sort","console","log","end","Test1","c","centroids","findCentroids","newCE","findClusters","concat","new_error","clusters","same","i","old_error","kmeans","success","JSON","parse","slice","map","n","Infinity","clu","j","center","dataset","dp","closest","closest_distance","dist","root"],"mappings":"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","file":"Test.js","sourcesContent":["import Db from '../src/server/Db';\nconst fs = require('fs');\n\nclass Test {\n    constructor(){\n        let database = new Db({\n            debug: () => {}\n        });\n\n        let db = database.getDatabase();\n\n        let rows = fs.readFileSync(\"./1-28.csv\", \"utf8\").split(\"\\n\");\n\n        let features = {};\n\n        let fp_id = 0;\n\n        rows.forEach((row) => {\n            row = row.split(\",\");\n            if(typeof(row[1]) == \"undefined\") return;\n\n            rows.forEach((row1) => {\n                row1 = row1.split(\",\");\n                if(typeof(row1[1]) == \"undefined\") return;\n                fp_id = row[0];\n                features[row[1] + row1[1]] = Math.abs(Number(row[4]) - Number(row1[4]));\n            });\n        });\n        this.start = new Date().getTime();\n        let data = [];\n        let keys = Object.keys(features);\n        let done = 0;\n\n        keys.forEach((key) => {\n            db.all(Db.query_get_features.replace(\":feature_value:\", features[key]), [key, fp_id], (err, rows) => {\n                data.push(rows);\n                done++;\n                if(done >= keys.length){\n                    db.close();\n                    this.makeGuess(data);\n                }\n            });\n        });\n    }\n\n    makeGuess(data){\n\n        let distances = {};\n        let knn = [];\n\n        data.forEach((feature) => {\n            if(feature.length == 0) return;\n\n            feature.forEach((coord) => {\n                if(typeof(distances[coord.x + \"_\" + coord.y]) == \"undefined\"){\n                    distances[coord.x + \"_\" + coord.y] = [];\n                }\n\n                distances[coord.x + \"_\" + coord.y].push(Math.pow(coord.diff, 2));\n            });\n        });\n        let keys = Object.keys(distances);\n        keys.forEach((key) => {\n            knn.push({\n                x_y: key,\n                distance: Math.sqrt(distances[key].reduce((a, b) => { return a+b; }))\n            });\n        });\n        knn.sort((a, b) => { return a.distance > b.distance; });\n\n        console.log(knn);\n        this.end = new Date().getTime();\n        console.log(this.end - this.start);\n    }\n\n}\n\n//new Test();\n\nclass Test1{\n\n    kmeans(c){\n        let centroids = this.findCentroids(c);\n        let newCE = this.findClusters(\n            centroids,\n            c.reduce((a, b) => { return a.concat(b); })\n        );\n\n        let new_error = newCE[0];\n        let clusters = newCE[1];\n\n        let same = true;\n        for(let i = 0; i < new_error.length; i++){\n            if(new_error[i] !== this.old_error[i]){\n                same = false;\n                this.old_error = new_error;\n                break;\n            }\n        }\n        if(same){\n            return clusters;\n        }else{\n            return this.kmeans(clusters);\n        }\n    }\n\n    constructor(){\n        const success = JSON.parse('{\"succes\":true,\"knn\":[{\"x_y\":\"8_2\",\"x\":8,\"y\":2,\"distance\":285.15278139022917},{\"x_y\":\"0_20\",\"x\":0,\"y\":20,\"distance\":267.51499438540867},{\"x_y\":\"1_20\",\"x\":1,\"y\":20,\"distance\":224.59007657700653},{\"x_y\":\"2_17\",\"x\":2,\"y\":17,\"distance\":201.50943271573516},{\"x_y\":\"0_17\",\"x\":0,\"y\":17,\"distance\":203.63129405777823}],\"center\":[3,16]}');\n\n        let clusters = [\n            success.knn.slice(0, 2)\n                .map((n) => {return [n.x, n.y];}),\n            success.knn.slice(2, 5)\n                .map((n) => {return [n.x, n.y];})\n        ];\n\n        this.old_error = clusters.map(() => {return Infinity;});\n\n        clusters = this.kmeans(clusters);\n\n        console.log(clusters);\n    }\n\n\n    findCentroids(clusters){\n\n        let centroids = [];\n\n        for(let i = 0; i < clusters.length; i++){\n            let clu = clusters[i];\n            let x = 0;\n            let y = 0;\n            for(let j = 0; j < clu.length; j++){\n                x += clu[j][0];\n                y += clu[j][1];\n            }\n            let center = [x / clu.length, y / clu.length];\n            centroids.push(center);\n        }\n        return centroids;\n    }\n\n    findClusters(centroids, dataset){\n\n        let clusters = centroids.map((c) => { return []; });\n        let new_error = centroids.map(() => {return 0;});\n        for(let i = 0; i < dataset.length; i++){\n            let dp = dataset[i];\n            let closest = false;\n            let closest_distance = Infinity;\n            for(let j = 0; j < centroids.length; j++){\n                let center = centroids[j];\n                let distance = this.dist(center, dp);\n                if(distance < closest_distance){\n                    closest = j;\n                    closest_distance = distance;\n                }\n            }\n            new_error[closest] = Number(new_error[closest]) + Math.pow(closest_distance, 2);\n\n            clusters[closest].push(dp);\n        }\n        return [new_error, clusters];\n    }\n\n    dist(a, b){\n        let root = 0;\n        for(let i = 0; i < a.length; i++){\n            root += Math.pow((a[i] - b[i]), 2);\n        }\n        return Math.sqrt(root);\n    }\n}\n\n"]}